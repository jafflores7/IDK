{"version":3,"file":"index.js","sources":["../src/types.ts","../src/validation.ts","../src/field-builders.ts","../src/utils.ts","../src/tool.ts"],"sourcesContent":["// Core type definitions for AI Spine tools\n\n/**\n * Metadata information for a tool that describes its identity, capabilities, and maintenance information.\n * This information is used for tool discovery, documentation generation, and runtime verification.\n *\n * @example\n * ```typescript\n * const metadata: ToolMetadata = {\n *   name: 'weather-api-tool',\n *   version: '1.0.0',\n *   description: 'Fetches current weather data for any city',\n *   capabilities: ['weather.current', 'weather.forecast'],\n *   author: 'John Doe',\n *   license: 'MIT',\n *   homepage: 'https://github.com/user/weather-tool',\n *   repository: 'https://github.com/user/weather-tool.git',\n *   tags: ['weather', 'api', 'external-service'],\n *   requirements: {\n *     apiKeys: ['OPENWEATHER_API_KEY'],\n *     permissions: ['internet-access'],\n *     runtimeDependencies: ['node:18+']\n *   }\n * }\n * ```\n */\nexport interface ToolMetadata {\n  /** Unique identifier for the tool (kebab-case recommended) */\n  name: string;\n\n  /** Semantic version string (e.g., \"1.0.0\") */\n  version: string;\n\n  /** Human-readable description of what the tool does */\n  description: string;\n\n  /** List of specific capabilities this tool provides for AI agents */\n  capabilities: string[];\n\n  /** Tool author or maintainer information */\n  author?: string;\n\n  /** SPDX license identifier (e.g., \"MIT\", \"Apache-2.0\") */\n  license?: string;\n\n  /** URL to the tool's homepage or documentation */\n  homepage?: string;\n\n  /** Git repository URL for the tool's source code */\n  repository?: string;\n\n  /** Tags for categorization and discovery */\n  tags?: string[];\n\n  /** Minimum SDK version required to run this tool */\n  minSdkVersion?: string;\n\n  /** Tool requirements and dependencies */\n  requirements?: {\n    /** Required API keys or secrets */\n    apiKeys?: string[];\n    /** Required system permissions */\n    permissions?: string[];\n    /** Runtime dependencies (Node.js version, etc.) */\n    runtimeDependencies?: string[];\n  };\n\n  /** Deprecation information if the tool is being phased out */\n  deprecation?: {\n    /** Whether the tool is deprecated */\n    deprecated: boolean;\n    /** Deprecation reason */\n    reason?: string;\n    /** Alternative tool recommendation */\n    alternative?: string;\n    /** Date when support will end */\n    endOfLife?: string;\n  };\n}\n\n/**\n * Supported field types for tool input validation.\n * These types map to JSON Schema types and enable automatic validation.\n */\nexport type ToolInputFieldType =\n  | 'string' // Text values, URLs, emails, etc.\n  | 'number' // Numeric values (integers and floats)\n  | 'boolean' // True/false values\n  | 'array' // Lists of values\n  | 'object' // Complex nested objects\n  | 'date' // Date values (ISO 8601 format)\n  | 'time' // Time values (HH:MM:SS format)\n  | 'datetime' // Date and time combined\n  | 'email' // Email addresses with validation\n  | 'url' // URLs with validation\n  | 'uuid' // UUID strings\n  | 'json' // Raw JSON objects\n  | 'file' // File upload references\n  | 'enum'; // Predefined set of values\n\n/**\n * String format validation options for string-type fields.\n * These provide additional validation beyond basic string checking.\n */\nexport type StringFormat =\n  | 'email' // RFC 5322 email validation\n  | 'url' // Valid HTTP/HTTPS URLs\n  | 'uri' // General URI format\n  | 'uuid' // UUID v4 format\n  | 'regex' // Custom regex pattern\n  | 'hostname' // Valid hostname\n  | 'ipv4' // IPv4 address\n  | 'ipv6' // IPv6 address\n  | 'base64' // Base64 encoded strings\n  | 'jwt' // JSON Web Token format\n  | 'slug' // URL-friendly slugs\n  | 'color-hex' // Hexadecimal color codes\n  | 'semver'; // Semantic version strings\n\n/**\n * Definition of an input field for a tool. This interface describes how to validate\n * and process input data from AI agents, including type checking, constraints, and\n * transformation rules.\n *\n * @example\n * ```typescript\n * const cityField: ToolInputField = {\n *   type: 'string',\n *   required: true,\n *   description: 'Name of the city to get weather for',\n *   minLength: 2,\n *   maxLength: 100,\n *   example: 'Madrid'\n * }\n *\n * const temperatureUnitsField: ToolInputField = {\n *   type: 'enum',\n *   required: false,\n *   description: 'Temperature units for the response',\n *   enum: ['celsius', 'fahrenheit', 'kelvin'],\n *   default: 'celsius'\n * }\n * ```\n */\nexport interface ToolInputField {\n  /** The data type of this field */\n  type: ToolInputFieldType;\n\n  /** Whether this field is required for tool execution */\n  required: boolean;\n\n  /** Human-readable description of what this field represents */\n  description?: string;\n\n  /** Default value if not provided (only for non-required fields) */\n  default?: any;\n\n  /** Example value for documentation and testing */\n  example?: any;\n\n  // String-specific validations\n  /** Minimum string length (string type only) */\n  minLength?: number;\n\n  /** Maximum string length (string type only) */\n  maxLength?: number;\n\n  /** Regex pattern for string validation (string type only) */\n  pattern?: string;\n\n  /** String format validation (string type only) */\n  format?: StringFormat;\n\n  // Number-specific validations\n  /** Minimum numeric value (number type only) */\n  min?: number;\n\n  /** Maximum numeric value (number type only) */\n  max?: number;\n\n  /** Whether the number must be an integer (number type only) */\n  integer?: boolean;\n\n  /** Number of decimal places allowed (number type only) */\n  precision?: number;\n\n  // Enum validations\n  /** Allowed values for enum type */\n  enum?: any[];\n\n  /** Human-readable labels for enum values */\n  enumLabels?: string[];\n\n  // Array-specific validations\n  /** Type definition for array items (array type only) */\n  items?: ToolInputField;\n\n  /** Minimum array length (array type only) */\n  minItems?: number;\n\n  /** Maximum array length (array type only) */\n  maxItems?: number;\n\n  /** Whether array items must be unique (array type only) */\n  uniqueItems?: boolean;\n\n  // Object-specific validations\n  /** Property definitions for object type */\n  properties?: Record<string, ToolInputField>;\n\n  /** Names of required properties in objects (object type only) */\n  requiredProperties?: string[];\n\n  /** Whether additional properties are allowed in objects (object type only) */\n  additionalProperties?: boolean;\n\n  // File-specific validations\n  /** Allowed MIME types for file uploads (file type only) */\n  allowedMimeTypes?: string[];\n\n  /** Maximum file size in bytes (file type only) */\n  maxFileSize?: number;\n\n  // Date/time specific validations\n  /** Minimum date/time value (date/datetime/time types only) */\n  minDate?: string;\n\n  /** Maximum date/time value (date/datetime/time types only) */\n  maxDate?: string;\n\n  /** Timezone requirement for datetime fields */\n  timezone?: 'required' | 'optional' | 'utc-only';\n\n  // Advanced validations\n  /** Custom validation function (for complex business logic) */\n  customValidator?: string; // Reference to a validation function\n\n  /** Whether this field should be sanitized before validation */\n  sanitize?: boolean;\n\n  /** Transformation to apply to the value before validation */\n  transform?: 'trim' | 'lowercase' | 'uppercase' | 'normalize';\n\n  /** Whether this field contains sensitive data (affects logging/debugging) */\n  sensitive?: boolean;\n}\n\n/**\n * Supported field types for tool configuration.\n * Configuration fields are typically set once and used across multiple executions.\n */\nexport type ToolConfigFieldType =\n  | 'string' // General text configuration\n  | 'number' // Numeric configuration values\n  | 'boolean' // True/false flags\n  | 'apiKey' // API keys and authentication tokens\n  | 'secret' // Other sensitive configuration data\n  | 'url' // Service endpoints and URLs\n  | 'enum' // Predefined configuration options\n  | 'json'; // Complex configuration objects\n\n/**\n * Configuration field definition for tools. Configuration fields are typically\n * set during tool setup and remain constant across multiple executions.\n * These differ from input fields as they represent tool-level settings rather\n * than per-execution parameters.\n *\n * @example\n * ```typescript\n * const apiKeyConfig: ToolConfigField = {\n *   type: 'apiKey',\n *   required: true,\n *   description: 'OpenWeatherMap API key for weather data access',\n *   validation: {\n *     pattern: '^[a-f0-9]{32}$',\n *     errorMessage: 'API key must be a 32-character hexadecimal string'\n *   }\n * }\n *\n * const environmentConfig: ToolConfigField = {\n *   type: 'enum',\n *   required: false,\n *   description: 'API environment to use',\n *   enum: ['production', 'staging', 'development'],\n *   default: 'production'\n * }\n * ```\n */\nexport interface ToolConfigField {\n  /** The data type of this configuration field */\n  type: ToolConfigFieldType;\n\n  /** Whether this configuration field is required for tool operation */\n  required: boolean;\n\n  /** Human-readable description of what this configuration represents */\n  description?: string;\n\n  /** Default value if not provided (only for non-required fields) */\n  default?: any;\n\n  /** Whether this field contains sensitive data (API keys, passwords, etc.) */\n  secret?: boolean;\n\n  /** Example value for documentation (should be safe/fake for secret fields) */\n  example?: any;\n\n  /** Validation rules for this configuration field */\n  validation?: {\n    /** Minimum numeric value or string length */\n    min?: number;\n\n    /** Maximum numeric value or string length */\n    max?: number;\n\n    /** Regex pattern for string validation */\n    pattern?: string;\n\n    /** Allowed values for enum type */\n    enum?: any[];\n\n    /** Custom error message for validation failures */\n    errorMessage?: string;\n\n    /** URL validation for URL type fields */\n    allowedProtocols?: string[]; // e.g., ['https', 'http']\n\n    /** For JSON type, schema to validate against */\n    jsonSchema?: any;\n  };\n\n  /** Environment variable name where this config can be loaded from */\n  envVar?: string;\n\n  /** Whether this field can be overridden at runtime */\n  allowRuntimeOverride?: boolean;\n\n  /** Category for grouping related configuration fields */\n  category?: string;\n\n  /** Priority level for configuration (higher numbers = more important) */\n  priority?: number;\n}\n\n/**\n * Complete schema definition for a tool, including input validation rules,\n * configuration requirements, and validation logic. This schema is used to\n * automatically validate requests, generate documentation, and provide\n * type safety throughout the tool execution pipeline.\n *\n * @example\n * ```typescript\n * const weatherToolSchema: ToolSchema = {\n *   input: {\n *     city: {\n *       type: 'string',\n *       required: true,\n *       description: 'Name of the city to get weather for',\n *       minLength: 2,\n *       maxLength: 100,\n *       example: 'Madrid'\n *     },\n *     units: {\n *       type: 'enum',\n *       required: false,\n *       description: 'Temperature units',\n *       enum: ['celsius', 'fahrenheit'],\n *       default: 'celsius'\n *     }\n *   },\n *   config: {\n *     apiKey: {\n *       type: 'apiKey',\n *       required: true,\n *       description: 'OpenWeatherMap API key',\n *       secret: true,\n *       envVar: 'OPENWEATHER_API_KEY'\n *     }\n *   },\n *   validation: {\n *     crossFieldValidation: [\n *       {\n *         rule: 'conditional',\n *         condition: 'input.advanced === true',\n *         requires: ['input.coordinates']\n *       }\n *     ]\n *   }\n * }\n * ```\n */\nexport interface ToolSchema {\n  /** Input field definitions - data provided by AI agents for each execution */\n  input: Record<string, ToolInputField>;\n\n  /** Configuration field definitions - tool setup and authentication */\n  config: Record<string, ToolConfigField>;\n\n  /** Advanced validation rules that span multiple fields */\n  validation?: {\n    /** Cross-field validation rules */\n    crossFieldValidation?: {\n      /** Validation rule type */\n      rule: 'conditional' | 'mutual_exclusion' | 'dependency' | 'custom';\n\n      /** Human-readable description of the rule */\n      description?: string;\n\n      /** Condition that triggers this validation (JavaScript expression) */\n      condition?: string;\n\n      /** Fields that are required when condition is true */\n      requires?: string[];\n\n      /** Fields that are forbidden when condition is true */\n      forbids?: string[];\n\n      /** Custom validation function reference */\n      customValidator?: string;\n\n      /** Error message to show when validation fails */\n      errorMessage?: string;\n    }[];\n\n    /** Global input constraints */\n    globalConstraints?: {\n      /** Maximum total size of all input data in bytes */\n      maxTotalInputSize?: number;\n\n      /** Required input combinations */\n      requiredCombinations?: string[][];\n\n      /** Mutually exclusive input groups */\n      mutuallyExclusive?: string[][];\n    };\n  };\n\n  /** Schema version for backward compatibility */\n  schemaVersion?: string;\n\n  /** Additional metadata about the schema */\n  metadata?: {\n    /** When this schema was last updated */\n    lastModified?: string;\n\n    /** Author of the schema */\n    author?: string;\n\n    /** Tags for schema categorization */\n    tags?: string[];\n\n    /** Whether this schema is stable (breaking changes expected) */\n    stable?: boolean;\n  };\n}\n\nexport interface ToolInput {\n  [key: string]: any;\n}\n\nexport interface ToolConfig {\n  [key: string]: any;\n}\n\n/**\n * Execution context provided to tools during execution. This contains metadata\n * about the current execution, tracking information, and environmental data\n * that tools can use for logging, analytics, and conditional behavior.\n *\n * @example\n * ```typescript\n * const context: ToolExecutionContext = {\n *   executionId: 'exec_1234567890abcdef',\n *   toolId: 'weather-api-tool',\n *   toolVersion: '1.2.0',\n *   timestamp: new Date('2024-01-15T10:30:00Z'),\n *   sessionId: 'session_abc123',\n *   userId: 'user_xyz789',\n *   environment: 'production',\n *   requestId: 'req_fedcba0987654321',\n *   performance: {\n *     startTime: Date.now(),\n *     timeoutMs: 30000\n *   },\n *   security: {\n *     apiKeyHash: 'sha256:abc123...',\n *     permissions: ['weather.read', 'location.read']\n *   }\n * }\n * ```\n */\nexport interface ToolExecutionContext {\n  /** Unique identifier for this specific execution */\n  executionId: string;\n\n  /** Unique identifier of the tool being executed */\n  toolId: string;\n\n  /** Version of the tool being executed */\n  toolVersion: string;\n\n  /** Timestamp when execution started */\n  timestamp: Date;\n\n  /** Session identifier (groups related executions) */\n  sessionId?: string;\n\n  /** User identifier (if available) */\n  userId?: string;\n\n  /** Request identifier for tracing across services */\n  requestId?: string;\n\n  /** Environment where the tool is running */\n  environment?: 'development' | 'staging' | 'production' | string;\n\n  /** Performance and timing information */\n  performance?: {\n    /** Execution start time (high-resolution timestamp) */\n    startTime: number;\n\n    /** Maximum execution time allowed in milliseconds */\n    timeoutMs?: number;\n\n    /** Priority level for this execution */\n    priority?: 'low' | 'normal' | 'high' | 'critical';\n\n    /** Expected execution duration in milliseconds (for monitoring) */\n    expectedDurationMs?: number;\n  };\n\n  /** Security and authentication context */\n  security?: {\n    /** Hash of the API key used (for logging without exposing the key) */\n    apiKeyHash?: string;\n\n    /** Permissions granted to this execution */\n    permissions?: string[];\n\n    /** Rate limiting information */\n    rateLimiting?: {\n      /** Remaining requests in current window */\n      remaining?: number;\n\n      /** When the rate limit window resets */\n      resetAt?: Date;\n\n      /** Total limit per window */\n      limit?: number;\n    };\n\n    /** Source IP address (if applicable) */\n    sourceIp?: string;\n\n    /** User agent string (if applicable) */\n    userAgent?: string;\n  };\n\n  /** AI agent information */\n  agent?: {\n    /** Type/name of the AI agent making the request */\n    type?: string;\n\n    /** Version of the AI agent */\n    version?: string;\n\n    /** Model or engine being used */\n    model?: string;\n\n    /** Conversation or thread identifier */\n    conversationId?: string;\n  };\n\n  /** Debugging and development information */\n  debug?: {\n    /** Whether debug mode is enabled */\n    enabled: boolean;\n\n    /** Debug level */\n    level?: 'info' | 'debug' | 'trace';\n\n    /** Custom debug metadata */\n    metadata?: Record<string, any>;\n  };\n\n  /** Custom metadata for tool-specific context */\n  metadata?: Record<string, any>;\n\n  /** Execution flags and options */\n  flags?: {\n    /** Whether to enable dry-run mode (validation only) */\n    dryRun?: boolean;\n\n    /** Whether to bypass caching */\n    noCache?: boolean;\n\n    /** Whether to enable verbose output */\n    verbose?: boolean;\n\n    /** Custom execution flags */\n    custom?: Record<string, boolean>;\n  };\n}\n\n/**\n * Standardized result format for tool executions. This interface ensures\n * consistent response format across all tools, enabling proper error handling,\n * performance monitoring, and result processing by AI agents.\n *\n * @example\n * ```typescript\n * // Successful execution\n * const successResult: ToolExecutionResult = {\n *   status: 'success',\n *   data: {\n *     temperature: 22,\n *     description: 'sunny',\n *     humidity: 45\n *   },\n *   timing: {\n *     executionTimeMs: 1250,\n *     startedAt: '2024-01-15T10:30:00.000Z',\n *     completedAt: '2024-01-15T10:30:01.250Z'\n *   },\n *   metadata: {\n *     source: 'openweathermap',\n *     cached: false\n *   }\n * }\n *\n * // Error execution\n * const errorResult: ToolExecutionResult = {\n *   status: 'error',\n *   error: {\n *     code: 'API_RATE_LIMIT_EXCEEDED',\n *     message: 'Rate limit exceeded for API key',\n *     type: 'client_error',\n *     retryable: true,\n *     retryAfterMs: 60000\n *   },\n *   timing: {\n *     executionTimeMs: 500,\n *     startedAt: '2024-01-15T10:30:00.000Z',\n *     completedAt: '2024-01-15T10:30:00.500Z'\n *   }\n * }\n * ```\n */\nexport interface ToolExecutionResult {\n  /** Execution status - indicates whether the tool executed successfully */\n  status: 'success' | 'error' | 'timeout' | 'cancelled';\n\n  /** Result data (only present on successful execution) */\n  data?: any;\n\n  /** Error information (only present when status is not 'success') */\n  error?: {\n    /** Machine-readable error code */\n    code: string;\n\n    /** Human-readable error message */\n    message: string;\n\n    /** Error type category */\n    type:\n      | 'validation_error'\n      | 'configuration_error'\n      | 'execution_error'\n      | 'network_error'\n      | 'timeout_error'\n      | 'system_error'\n      | 'client_error'\n      | 'server_error';\n\n    /** Additional error details */\n    details?: any;\n\n    /** Whether this error can be retried */\n    retryable?: boolean;\n\n    /** Suggested retry delay in milliseconds */\n    retryAfterMs?: number;\n\n    /** Stack trace (only in development/debug mode) */\n    stackTrace?: string;\n\n    /** Related field name (for validation errors) */\n    field?: string;\n\n    /** HTTP status code equivalent (if applicable) */\n    httpStatusCode?: number;\n  };\n\n  /** Timing and performance information */\n  timing?: {\n    /** Total execution time in milliseconds */\n    executionTimeMs: number;\n\n    /** When execution started (ISO 8601 timestamp) */\n    startedAt: string;\n\n    /** When execution completed (ISO 8601 timestamp) */\n    completedAt: string;\n\n    /** Time spent in different phases */\n    phases?: {\n      /** Input validation time */\n      validationMs?: number;\n\n      /** Core execution time */\n      executionMs?: number;\n\n      /** Result serialization time */\n      serializationMs?: number;\n    };\n\n    /** Whether execution was cancelled due to timeout */\n    timedOut?: boolean;\n  };\n\n  /** Resource usage information */\n  resources?: {\n    /** Memory usage at completion (bytes) */\n    memoryUsageBytes?: number;\n\n    /** CPU time used (milliseconds) */\n    cpuTimeMs?: number;\n\n    /** Network requests made */\n    networkRequests?: number;\n\n    /** External API calls made */\n    apiCalls?: {\n      /** Service name */\n      service: string;\n\n      /** Number of calls */\n      count: number;\n\n      /** Total time spent */\n      totalTimeMs: number;\n    }[];\n  };\n\n  /** Caching information */\n  cache?: {\n    /** Whether result was served from cache */\n    hit: boolean;\n\n    /** Cache key used */\n    key?: string;\n\n    /** When cache entry expires */\n    expiresAt?: string;\n\n    /** Cache source */\n    source?: 'memory' | 'redis' | 'database' | 'file';\n  };\n\n  /** Output metadata and processing information */\n  metadata?: {\n    /** Data source information */\n    source?: string;\n\n    /** Result freshness timestamp */\n    freshness?: string;\n\n    /** Result version or revision */\n    version?: string;\n\n    /** Whether result has been truncated */\n    truncated?: boolean;\n\n    /** Result format and type */\n    format?: string;\n\n    /** Data quality indicators */\n    quality?: {\n      /** Confidence score (0-1) */\n      confidence?: number;\n\n      /** Data completeness (0-1) */\n      completeness?: number;\n\n      /** Data accuracy indicators */\n      accuracy?: number;\n    };\n\n    /** Custom tool-specific metadata */\n    custom?: Record<string, any>;\n  };\n\n  /** Warnings that don't prevent execution but should be noted */\n  warnings?: {\n    /** Warning code */\n    code: string;\n\n    /** Warning message */\n    message: string;\n\n    /** Severity level */\n    severity: 'low' | 'medium' | 'high';\n\n    /** Additional warning details */\n    details?: any;\n  }[];\n}\n\nexport interface ToolHealthCheck {\n  status: 'healthy' | 'unhealthy' | 'degraded';\n  version: string;\n  uptime_seconds: number;\n  metadata: ToolMetadata;\n  capabilities: string[];\n  last_execution?: Date;\n  error_rate_percent?: number;\n  avg_response_time_ms?: number;\n}\n\n/**\n * Complete definition of a tool, including all metadata, validation schema,\n * and the execution function. This is the main interface that developers\n * implement when creating tools with the AI Spine SDK.\n *\n * @example\n * ```typescript\n * const weatherTool: ToolDefinition = {\n *   metadata: {\n *     name: 'weather-api-tool',\n *     version: '1.0.0',\n *     description: 'Get current weather for any city',\n *     capabilities: ['weather.current']\n *   },\n *   schema: {\n *     input: {\n *       city: {\n *         type: 'string',\n *         required: true,\n *         description: 'City name'\n *       }\n *     },\n *     config: {\n *       apiKey: {\n *         type: 'apiKey',\n *         required: true,\n *         description: 'Weather API key'\n *       }\n *     }\n *   },\n *   execute: async (input, config, context) => {\n *     // Tool implementation here\n *     return {\n *       status: 'success',\n *       data: { temperature: 22, description: 'sunny' }\n *     };\n *   }\n * }\n * ```\n */\nexport interface ToolDefinition<TInput = ToolInput, TConfig = ToolConfig> {\n  /** Tool metadata and identification information */\n  metadata: ToolMetadata;\n\n  /** Input and configuration validation schema */\n  schema: ToolSchema;\n\n  /** Main tool execution function */\n  execute: (\n    input: TInput,\n    config: TConfig,\n    context: ToolExecutionContext\n  ) => Promise<ToolExecutionResult>;\n\n  /** Optional setup function called when tool is initialized */\n  setup?: (config: TConfig) => Promise<void>;\n\n  /** Optional cleanup function called when tool is stopped */\n  cleanup?: () => Promise<void>;\n\n  /** Optional health check function for monitoring */\n  healthCheck?: () => Promise<{\n    status: 'healthy' | 'unhealthy' | 'degraded';\n    details?: Record<string, any>;\n  }>;\n}\n\n// AI Spine Platform API types\nexport interface AISpineExecuteRequest {\n  tool_id: string;\n  input_data: ToolInput;\n  config?: ToolConfig;\n  execution_id?: string;\n  metadata?: Record<string, any>;\n}\n\nexport interface AISpineExecuteResponse {\n  execution_id: string;\n  status: 'success' | 'error';\n  output_data?: any;\n  error_code?: string;\n  error_message?: string;\n  error_details?: any;\n  execution_time_ms: number;\n  timestamp: string;\n}\n\nexport interface AISpineHealthResponse {\n  status: 'healthy' | 'unhealthy' | 'degraded';\n  version: string;\n  tool_metadata: ToolMetadata;\n  capabilities: string[];\n  uptime_seconds: number;\n  last_execution?: string;\n  error_rate_percent?: number;\n  avg_response_time_ms?: number;\n}\n\n// Error types\nexport class ToolError extends Error {\n  public readonly code: string;\n  public readonly details?: any;\n\n  constructor(message: string, code: string = 'TOOL_ERROR', details?: any) {\n    super(message);\n    this.name = 'ToolError';\n    this.code = code;\n    this.details = details;\n  }\n}\n\nexport class ValidationError extends ToolError {\n  constructor(message: string, field?: string, value?: any) {\n    super(message, 'VALIDATION_ERROR', { field, value });\n    this.name = 'ValidationError';\n  }\n}\n\nexport class ConfigurationError extends ToolError {\n  constructor(message: string, missingKeys?: string[]) {\n    super(message, 'CONFIGURATION_ERROR', { missingKeys });\n    this.name = 'ConfigurationError';\n  }\n}\n\nexport class ExecutionError extends ToolError {\n  constructor(message: string, cause?: Error) {\n    super(message, 'EXECUTION_ERROR', { cause: cause?.message });\n    this.name = 'ExecutionError';\n  }\n}\n\n// Utility types\nexport type DeepPartial<T> = {\n  [P in keyof T]?: T[P] extends object ? DeepPartial<T[P]> : T[P];\n};\n\nexport type RequiredFields<T, K extends keyof T> = T & Required<Pick<T, K>>;\n\nexport type OptionalFields<T, K extends keyof T> = T & Partial<Pick<T, K>>;\n","/**\n * Advanced validation system for AI Spine tools using Zod for robust schema validation.\n * This module provides comprehensive validation for tool inputs, configurations, and\n * cross-field relationships with performance optimizations and detailed error reporting.\n * \n * @example\n * ```typescript\n * import { ZodSchemaValidator } from '@ai-spine/tools-core';\n * \n * const validator = new ZodSchemaValidator();\n * \n * // Validate tool input\n * \n \n * const result = await validator.validateInput(inputData, inputSchema);\n * if (!result.success) {\n *   console.error('Validation errors:', result.errors);\n * }\n * \n * // Validate configuration\n * const configResult = await validator.validateConfig(config, configSchema);\n * ```\n */\n\nimport { z } from 'zod';\nimport {\n  ToolInputField,\n  ToolConfigField,\n  ToolInput,\n  ToolConfig,\n  ToolSchema,\n  ValidationError,\n  ConfigurationError,\n  StringFormat,\n} from './types.js';\n\n/**\n * Result of a validation operation, providing detailed success/failure information\n */\nexport interface ValidationResult<T = any> {\n  /** Whether validation was successful */\n  success: boolean;\n\n  /** Validated and transformed data (only present on success) */\n  data?: T;\n\n  /** Validation errors (only present on failure) */\n  errors?: ValidationErrorDetail[];\n\n  /** Performance information */\n  timing?: {\n    /** Validation duration in milliseconds */\n    durationMs: number;\n\n    /** Whether schema was served from cache */\n    fromCache: boolean;\n  };\n}\n\n/**\n * Detailed validation error information\n */\nexport interface ValidationErrorDetail {\n  /** Field path where error occurred */\n  path: string[];\n\n  /** Error code for programmatic handling */\n  code: string;\n\n  /** Human-readable error message */\n  message: string;\n\n  /** Field value that caused the error */\n  value?: any;\n\n  /** Expected value or format */\n  expected?: string;\n\n  /** Additional error context */\n  context?: Record<string, any>;\n}\n\n/**\n * Validation options for customizing validation behavior\n */\nexport interface ValidationOptions {\n  /** Whether to abort on first error or collect all errors */\n  abortEarly?: boolean;\n\n  /** Whether to transform values during validation */\n  transform?: boolean;\n\n  /** Whether to strip unknown fields */\n  stripUnknown?: boolean;\n\n  /** Custom error messages for specific fields */\n  customMessages?: Record<string, string>;\n\n  /** Context for conditional validations */\n  context?: Record<string, any>;\n}\n\n/**\n * Cache entry for compiled Zod schemas\n */\ninterface SchemaCache {\n  /** Compiled Zod schema */\n  schema: z.ZodSchema;\n\n  /** When the schema was cached */\n  timestamp: number;\n\n  /** Number of times this schema has been used */\n  hitCount: number;\n\n  /** Hash of the original field definition for cache invalidation */\n  hash: string;\n}\n\n/**\n * Advanced schema validator using Zod for robust validation with caching,\n * performance optimization, and detailed error reporting.\n */\nexport class ZodSchemaValidator {\n  private static readonly CACHE_TTL_MS = 5 * 60 * 1000; // 5 minutes\n  private static readonly MAX_CACHE_SIZE = 1000;\n\n  /** Schema cache for performance optimization */\n  private readonly schemaCache = new Map<string, SchemaCache>();\n\n  /** Performance metrics */\n  private readonly metrics = {\n    totalValidations: 0,\n    cacheHits: 0,\n    averageDurationMs: 0,\n    totalDurationMs: 0,\n  };\n\n  /**\n   * Validates tool input data against the provided schema\n   */\n  async validateInput(\n    input: ToolInput,\n    schema: Record<string, ToolInputField>,\n    _options: ValidationOptions = {}\n  ): Promise<ValidationResult> {\n    const startTime = Date.now();\n\n    try {\n      // Build Zod schema for input validation\n      const zodSchema = this.buildInputSchema(schema, _options);\n\n      // Perform validation\n      const result = await this.performValidation(zodSchema, input, _options);\n\n      const duration = Date.now() - startTime;\n      this.updateMetrics(duration, result.fromCache);\n\n      if (result.success) {\n        return {\n          success: true,\n          data: result.data,\n          timing: {\n            durationMs: duration,\n            fromCache: result.fromCache,\n          },\n        };\n      } else {\n        return {\n          success: false,\n          errors: result.errors,\n          timing: {\n            durationMs: duration,\n            fromCache: result.fromCache,\n          },\n        };\n      }\n    } catch (error) {\n      const duration = Date.now() - startTime;\n\n      return {\n        success: false,\n        errors: [\n          {\n            path: [],\n            code: 'VALIDATION_SYSTEM_ERROR',\n            message: `Validation system error: ${error instanceof Error ? error.message : String(error)}`,\n            context: { originalError: error },\n          },\n        ],\n        timing: {\n          durationMs: duration,\n          fromCache: false,\n        },\n      };\n    }\n  }\n\n  /**\n   * Validates tool configuration against the provided schema\n   */\n  async validateConfig(\n    config: ToolConfig,\n    schema: Record<string, ToolConfigField>,\n    _options: ValidationOptions = {}\n  ): Promise<ValidationResult> {\n    const startTime = Date.now();\n\n    try {\n      // Build Zod schema for config validation\n      const zodSchema = this.buildConfigSchema(schema, _options);\n\n      // Perform validation\n      const result = await this.performValidation(zodSchema, config, _options);\n\n      const duration = Date.now() - startTime;\n      this.updateMetrics(duration, result.fromCache);\n\n      if (result.success) {\n        return {\n          success: true,\n          data: result.data,\n          timing: {\n            durationMs: duration,\n            fromCache: result.fromCache,\n          },\n        };\n      } else {\n        return {\n          success: false,\n          errors: result.errors,\n          timing: {\n            durationMs: duration,\n            fromCache: result.fromCache,\n          },\n        };\n      }\n    } catch (error) {\n      const duration = Date.now() - startTime;\n\n      return {\n        success: false,\n        errors: [\n          {\n            path: [],\n            code: 'VALIDATION_SYSTEM_ERROR',\n            message: `Configuration validation system error: ${error instanceof Error ? error.message : String(error)}`,\n            context: { originalError: error },\n          },\n        ],\n        timing: {\n          durationMs: duration,\n          fromCache: false,\n        },\n      };\n    }\n  }\n\n  /**\n   * Validates complete tool schema including cross-field validations\n   */\n  async validateToolSchema(\n    data: { input: ToolInput; config: ToolConfig },\n    schema: ToolSchema,\n    _options: ValidationOptions = {}\n  ): Promise<ValidationResult> {\n    const startTime = Date.now();\n\n    try {\n      // Validate input and config separately first\n      const inputResult = await this.validateInput(\n        data.input,\n        schema.input,\n        _options\n      );\n      if (!inputResult.success) {\n        return inputResult;\n      }\n\n      const configResult = await this.validateConfig(\n        data.config,\n        schema.config,\n        _options\n      );\n      if (!configResult.success) {\n        return configResult;\n      }\n\n      // Perform cross-field validations if defined\n      if (schema.validation?.crossFieldValidation) {\n        const crossFieldResult = await this.validateCrossFieldRules(\n          { input: inputResult.data!, config: configResult.data! },\n          schema.validation.crossFieldValidation,\n          _options\n        );\n\n        if (!crossFieldResult.success) {\n          return crossFieldResult;\n        }\n      }\n\n      const duration = Date.now() - startTime;\n\n      return {\n        success: true,\n        data: {\n          input: inputResult.data!,\n          config: configResult.data!,\n        },\n        timing: {\n          durationMs: duration,\n          fromCache: false, // Cross-field validation doesn't use cache\n        },\n      };\n    } catch (error) {\n      const duration = Date.now() - startTime;\n\n      return {\n        success: false,\n        errors: [\n          {\n            path: [],\n            code: 'SCHEMA_VALIDATION_ERROR',\n            message: `Tool schema validation error: ${error instanceof Error ? error.message : String(error)}`,\n            context: { originalError: error },\n          },\n        ],\n        timing: {\n          durationMs: duration,\n          fromCache: false,\n        },\n      };\n    }\n  }\n\n  /**\n   * Builds a Zod schema from ToolInputField definitions\n   */\n  private buildInputSchema(\n    schema: Record<string, ToolInputField>,\n    _options: ValidationOptions\n  ): z.ZodSchema {\n    const cacheKey = this.generateCacheKey('input', schema, _options);\n    const cached = this.getFromCache(cacheKey);\n\n    if (cached) {\n      return cached.schema;\n    }\n\n    const zodFields: Record<string, z.ZodSchema> = {};\n\n    for (const [fieldName, fieldDef] of Object.entries(schema)) {\n      zodFields[fieldName] = this.buildFieldSchema(\n        fieldDef,\n        fieldName,\n        _options\n      );\n    }\n\n    const zodSchema = z.object(zodFields);\n    const finalSchema = _options.stripUnknown ? zodSchema.strip() : zodSchema;\n\n    // Cache the schema\n    this.setCache(cacheKey, finalSchema, schema);\n\n    return finalSchema;\n  }\n\n  /**\n   * Builds a Zod schema from ToolConfigField definitions\n   */\n  private buildConfigSchema(\n    schema: Record<string, ToolConfigField>,\n    _options: ValidationOptions\n  ): z.ZodSchema {\n    const cacheKey = this.generateCacheKey('config', schema, _options);\n    const cached = this.getFromCache(cacheKey);\n\n    if (cached) {\n      return cached.schema;\n    }\n\n    const zodFields: Record<string, z.ZodSchema> = {};\n\n    for (const [fieldName, fieldDef] of Object.entries(schema)) {\n      zodFields[fieldName] = this.buildConfigFieldSchema(\n        fieldDef,\n        fieldName,\n        _options\n      );\n    }\n\n    const zodSchema = z.object(zodFields);\n    const finalSchema = _options.stripUnknown ? zodSchema.strip() : zodSchema;\n\n    // Cache the schema\n    this.setCache(cacheKey, finalSchema, schema);\n\n    return finalSchema;\n  }\n\n  /**\n   * Builds a Zod schema for a single input field\n   */\n  private buildFieldSchema(\n    field: ToolInputField,\n    fieldName: string,\n    _options: ValidationOptions\n  ): z.ZodSchema {\n    let schema: z.ZodSchema;\n\n    // Build base schema based on field type\n    switch (field.type) {\n      case 'string':\n        schema = z.string();\n\n        // Apply string-specific validations\n        if (field.minLength !== undefined) {\n          schema = (schema as z.ZodString).min(\n            field.minLength,\n            _options.customMessages?.[`${fieldName}.minLength`] ||\n              `${fieldName} must be at least ${field.minLength} characters long`\n          );\n        }\n\n        if (field.maxLength !== undefined) {\n          schema = (schema as z.ZodString).max(\n            field.maxLength,\n            _options.customMessages?.[`${fieldName}.maxLength`] ||\n              `${fieldName} must be at most ${field.maxLength} characters long`\n          );\n        }\n\n        if (field.pattern) {\n          schema = (schema as z.ZodString).regex(\n            new RegExp(field.pattern),\n            _options.customMessages?.[`${fieldName}.pattern`] ||\n              `${fieldName} does not match required pattern`\n          );\n        }\n\n        if (field.format) {\n          schema = this.applyStringFormat(\n            schema as z.ZodString,\n            field.format,\n            fieldName\n          );\n        }\n\n        // Apply transformations\n        if (_options.transform && field.transform) {\n          schema = this.applyStringTransform(\n            schema as z.ZodString,\n            field.transform\n          );\n        }\n        break;\n\n      case 'email':\n        schema = z\n          .string()\n          .email(\n            _options.customMessages?.[`${fieldName}.email`] ||\n              `${fieldName} must be a valid email address`\n          );\n        break;\n\n      case 'url':\n        schema = z\n          .string()\n          .url(\n            _options.customMessages?.[`${fieldName}.url`] ||\n              `${fieldName} must be a valid URL`\n          );\n        break;\n\n      case 'uuid':\n        schema = z\n          .string()\n          .uuid(\n            _options.customMessages?.[`${fieldName}.uuid`] ||\n              `${fieldName} must be a valid UUID`\n          );\n        break;\n\n      case 'number':\n        schema = z.number();\n\n        if (field.min !== undefined) {\n          schema = (schema as z.ZodNumber).min(\n            field.min,\n            _options.customMessages?.[`${fieldName}.min`] ||\n              `${fieldName} must be at least ${field.min}`\n          );\n        }\n\n        if (field.max !== undefined) {\n          schema = (schema as z.ZodNumber).max(\n            field.max,\n            _options.customMessages?.[`${fieldName}.max`] ||\n              `${fieldName} must be at most ${field.max}`\n          );\n        }\n\n        if (field.integer) {\n          schema = (schema as z.ZodNumber).int(\n            _options.customMessages?.[`${fieldName}.integer`] ||\n              `${fieldName} must be an integer`\n          );\n        }\n        break;\n\n      case 'boolean':\n        schema = z.boolean();\n        break;\n\n      case 'array': {\n        let itemSchema: z.ZodSchema = z.any();\n        if (field.items) {\n          itemSchema = this.buildFieldSchema(\n            field.items,\n            `${fieldName}[item]`,\n            _options\n          );\n        }\n\n        schema = z.array(itemSchema);\n\n        if (field.minItems !== undefined) {\n          schema = (schema as z.ZodArray<any>).min(\n            field.minItems,\n            _options.customMessages?.[`${fieldName}.minItems`] ||\n              `${fieldName} must contain at least ${field.minItems} items`\n          );\n        }\n\n        if (field.maxItems !== undefined) {\n          schema = (schema as z.ZodArray<any>).max(\n            field.maxItems,\n            _options.customMessages?.[`${fieldName}.maxItems`] ||\n              `${fieldName} must contain at most ${field.maxItems} items`\n          );\n        }\n        break;\n      }\n\n      case 'object':\n        if (field.properties) {\n          const objectFields: Record<string, z.ZodSchema> = {};\n          for (const [propName, propDef] of Object.entries(field.properties)) {\n            objectFields[propName] = this.buildFieldSchema(\n              propDef,\n              `${fieldName}.${propName}`,\n              _options\n            );\n          }\n          schema = z.object(objectFields);\n\n          if (!field.additionalProperties) {\n            schema = (schema as z.ZodObject<any>).strict();\n          }\n        } else {\n          schema = z.record(z.string(), z.any());\n        }\n        break;\n\n      case 'date':\n        schema = z.coerce.date();\n\n        if (field.minDate) {\n          const minDate = new Date(field.minDate);\n          schema = (schema as z.ZodDate).min(\n            minDate,\n            _options.customMessages?.[`${fieldName}.minDate`] ||\n              `${fieldName} must be after ${field.minDate}`\n          );\n        }\n\n        if (field.maxDate) {\n          const maxDate = new Date(field.maxDate);\n          schema = (schema as z.ZodDate).max(\n            maxDate,\n            _options.customMessages?.[`${fieldName}.maxDate`] ||\n              `${fieldName} must be before ${field.maxDate}`\n          );\n        }\n        break;\n\n      case 'datetime':\n        schema = z.coerce.date();\n        // Additional datetime-specific validations could be added here\n        break;\n\n      case 'time':\n        schema = z\n          .string()\n          .regex(\n            /^([01]?[0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9]$/,\n            _options.customMessages?.[`${fieldName}.time`] ||\n              `${fieldName} must be in HH:MM:SS format`\n          );\n        break;\n\n      case 'enum':\n        if (!field.enum || field.enum.length === 0) {\n          throw new Error(\n            `Enum field ${fieldName} must have enum values defined`\n          );\n        }\n        schema = z.enum(field.enum as [string, ...string[]]);\n        break;\n\n      case 'json':\n        schema = z.any().refine(\n          val => {\n            try {\n              if (typeof val === 'string') {\n                JSON.parse(val);\n              }\n              return true;\n            } catch {\n              return false;\n            }\n          },\n          _options.customMessages?.[`${fieldName}.json`] ||\n            `${fieldName} must be valid JSON`\n        );\n        break;\n\n      case 'file':\n        // File validation would typically be handled at a higher level\n        schema = z.object({\n          name: z.string(),\n          size: z.number(),\n          type: z.string(),\n        });\n\n        if (field.maxFileSize) {\n          schema = schema.refine(\n            (file: any) => file.size <= field.maxFileSize!,\n            _options.customMessages?.[`${fieldName}.maxFileSize`] ||\n              `${fieldName} file size must not exceed ${field.maxFileSize} bytes`\n          );\n        }\n\n        if (field.allowedMimeTypes && field.allowedMimeTypes.length > 0) {\n          schema = schema.refine(\n            (file: any) => field.allowedMimeTypes!.includes(file.type),\n            _options.customMessages?.[`${fieldName}.mimeType`] ||\n              `${fieldName} must be one of the allowed file types: ${field.allowedMimeTypes.join(', ')}`\n          );\n        }\n        break;\n\n      default:\n        schema = z.any();\n        break;\n    }\n\n    // Apply enum validation if defined (for non-enum types)\n    if (field.enum && field.type !== 'enum') {\n      schema = schema.refine(\n        val => field.enum!.includes(val),\n        _options.customMessages?.[`${fieldName}.enum`] ||\n          `${fieldName} must be one of: ${field.enum.join(', ')}`\n      );\n    }\n\n    // Handle required/optional and defaults\n    if (!field.required) {\n      schema = schema.optional();\n\n      if (field.default !== undefined) {\n        schema = schema.default(field.default);\n      }\n    }\n\n    return schema;\n  }\n\n  /**\n   * Builds a Zod schema for a single config field\n   */\n  private buildConfigFieldSchema(\n    field: ToolConfigField,\n    fieldName: string,\n    _options: ValidationOptions\n  ): z.ZodSchema {\n    let schema: z.ZodSchema;\n\n    switch (field.type) {\n      case 'string':\n        schema = z.string();\n        break;\n\n      case 'apiKey':\n      case 'secret':\n        schema = z.string().min(1, `${fieldName} cannot be empty`);\n        break;\n\n      case 'url':\n        schema = z.string().url(`${fieldName} must be a valid URL`);\n\n        if (field.validation?.allowedProtocols) {\n          schema = schema.refine(\n            url => {\n              try {\n                const parsed = new URL(url as string);\n                return field.validation!.allowedProtocols!.includes(\n                  parsed.protocol.slice(0, -1)\n                );\n              } catch {\n                return false;\n              }\n            },\n            `${fieldName} must use one of the allowed protocols: ${field.validation.allowedProtocols.join(', ')}`\n          );\n        }\n        break;\n\n      case 'number':\n        schema = z.number();\n        break;\n\n      case 'boolean':\n        schema = z.boolean();\n        break;\n\n      case 'enum':\n        if (!field.validation?.enum || field.validation.enum.length === 0) {\n          throw new Error(\n            `Enum config field ${fieldName} must have enum values defined`\n          );\n        }\n        schema = z.enum(field.validation.enum as [string, ...string[]]);\n        break;\n\n      case 'json':\n        schema = z.any();\n\n        if (field.validation?.jsonSchema) {\n          // Here you could integrate with a JSON Schema validator if needed\n          // For now, we'll just ensure it's valid JSON\n          schema = schema.refine(val => {\n            try {\n              if (typeof val === 'string') {\n                JSON.parse(val);\n              }\n              return true;\n            } catch {\n              return false;\n            }\n          }, `${fieldName} must be valid JSON`);\n        }\n        break;\n\n      default:\n        schema = z.any();\n        break;\n    }\n\n    // Apply validation rules\n    if (field.validation) {\n      const validation = field.validation;\n\n      if (validation.min !== undefined && schema instanceof z.ZodString) {\n        schema = schema.min(\n          validation.min,\n          validation.errorMessage ||\n            `${fieldName} must be at least ${validation.min} characters long`\n        );\n      }\n\n      if (validation.max !== undefined && schema instanceof z.ZodString) {\n        schema = schema.max(\n          validation.max,\n          validation.errorMessage ||\n            `${fieldName} must be at most ${validation.max} characters long`\n        );\n      }\n\n      if (validation.pattern && schema instanceof z.ZodString) {\n        schema = schema.regex(\n          new RegExp(validation.pattern),\n          validation.errorMessage ||\n            `${fieldName} does not match required pattern`\n        );\n      }\n    }\n\n    // Handle required/optional and defaults\n    if (!field.required) {\n      schema = schema.optional();\n\n      if (field.default !== undefined) {\n        schema = schema.default(field.default);\n      }\n    }\n\n    return schema;\n  }\n\n  /**\n   * Applies string format validation\n   */\n  private applyStringFormat(\n    schema: z.ZodString,\n    format: StringFormat,\n    fieldName: string\n  ): z.ZodType<string> {\n    switch (format) {\n      case 'email':\n        return schema.email(`${fieldName} must be a valid email address`);\n\n      case 'url':\n        return schema.url(`${fieldName} must be a valid URL`);\n\n      case 'uuid':\n        return schema.uuid(`${fieldName} must be a valid UUID`);\n\n      case 'ipv4':\n        return schema.regex(\n          /^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$/,\n          `${fieldName} must be a valid IPv4 address`\n        );\n\n      case 'ipv6':\n        return schema.regex(\n          /^(?:[0-9a-fA-F]{1,4}:){7}[0-9a-fA-F]{1,4}$|^::1$|^::$/,\n          `${fieldName} must be a valid IPv6 address`\n        );\n\n      case 'base64':\n        return schema.regex(\n          /^[A-Za-z0-9+/]*={0,2}$/,\n          `${fieldName} must be valid base64`\n        );\n\n      case 'jwt':\n        return schema.regex(\n          /^[A-Za-z0-9-_]+\\.[A-Za-z0-9-_]+\\.[A-Za-z0-9-_]*$/,\n          `${fieldName} must be a valid JWT`\n        );\n\n      case 'slug':\n        return schema.regex(\n          /^[a-z0-9]+(?:-[a-z0-9]+)*$/,\n          `${fieldName} must be a valid slug`\n        );\n\n      case 'color-hex':\n        return schema.regex(\n          /^#([A-Fa-f0-9]{6}|[A-Fa-f0-9]{3})$/,\n          `${fieldName} must be a valid hex color`\n        );\n\n      case 'semver':\n        return schema.regex(\n          /^(0|[1-9]\\d*)\\.(0|[1-9]\\d*)\\.(0|[1-9]\\d*)(?:-((?:0|[1-9]\\d*|\\d*[a-zA-Z-][0-9a-zA-Z-]*)(?:\\.(?:0|[1-9]\\d*|\\d*[a-zA-Z-][0-9a-zA-Z-]*))*))?(?:\\+([0-9a-zA-Z-]+(?:\\.[0-9a-zA-Z-]+)*))?$/,\n          `${fieldName} must be a valid semantic version`\n        );\n\n      default:\n        return schema;\n    }\n  }\n\n  /**\n   * Applies string transformations\n   */\n  private applyStringTransform(\n    schema: z.ZodString,\n    transform: string\n  ): z.ZodType<string> {\n    switch (transform) {\n      case 'trim':\n        return schema.transform(val => val.trim());\n\n      case 'lowercase':\n        return schema.transform(val => val.toLowerCase());\n\n      case 'uppercase':\n        return schema.transform(val => val.toUpperCase());\n\n      case 'normalize':\n        return schema.transform(val => val.normalize());\n\n      default:\n        return schema;\n    }\n  }\n\n  /**\n   * Performs the actual validation using Zod\n   */\n  private async performValidation(\n    schema: z.ZodSchema,\n    data: any,\n    _options: ValidationOptions\n  ): Promise<{\n    success: boolean;\n    data?: any;\n    errors?: ValidationErrorDetail[];\n    fromCache: boolean;\n  }> {\n    try {\n      const result = schema.safeParse(data);\n\n      if (result.success) {\n        return {\n          success: true,\n          data: result.data,\n          fromCache: false, // TODO: Implement result caching if needed\n        };\n      } else {\n        const errors = this.convertZodErrors(result.error);\n\n        return {\n          success: false,\n          errors,\n          fromCache: false,\n        };\n      }\n    } catch (error) {\n      return {\n        success: false,\n        errors: [\n          {\n            path: [],\n            code: 'PARSE_ERROR',\n            message: `Parsing error: ${error instanceof Error ? error.message : String(error)}`,\n            context: { originalError: error },\n          },\n        ],\n        fromCache: false,\n      };\n    }\n  }\n\n  /**\n   * Validates cross-field rules\n   */\n  private async validateCrossFieldRules(\n    data: { input: any; config: any },\n    rules: any[],\n    _options: ValidationOptions\n  ): Promise<ValidationResult> {\n    const errors: ValidationErrorDetail[] = [];\n\n    for (const rule of rules) {\n      try {\n        const isValid = await this.evaluateCrossFieldRule(data, rule, _options);\n\n        if (!isValid) {\n          errors.push({\n            path: ['cross-field'],\n            code: 'CROSS_FIELD_VALIDATION_FAILED',\n            message:\n              rule.errorMessage ||\n              rule.description ||\n              'Cross-field validation failed',\n            context: { rule },\n          });\n        }\n      } catch (error) {\n        errors.push({\n          path: ['cross-field'],\n          code: 'CROSS_FIELD_EVALUATION_ERROR',\n          message: `Error evaluating cross-field rule: ${error instanceof Error ? error.message : String(error)}`,\n          context: { rule, error },\n        });\n      }\n    }\n\n    return {\n      success: errors.length === 0,\n      ...(errors.length > 0 && { errors }),\n    };\n  }\n\n  /**\n   * Evaluates a single cross-field rule\n   */\n  private async evaluateCrossFieldRule(\n    data: { input: any; config: any },\n    rule: any,\n    _options: ValidationOptions\n  ): Promise<boolean> {\n    switch (rule.rule) {\n      case 'conditional':\n        if (rule.condition) {\n          // Simple condition evaluation (in production, you might want a safer evaluator)\n          const conditionMet = this.evaluateCondition(rule.condition, data);\n\n          if (conditionMet) {\n            // Check if required fields are present\n            if (rule.requires) {\n              for (const fieldPath of rule.requires) {\n                if (!this.getNestedValue(data, fieldPath)) {\n                  return false;\n                }\n              }\n            }\n\n            // Check if forbidden fields are absent\n            if (rule.forbids) {\n              for (const fieldPath of rule.forbids) {\n                if (this.getNestedValue(data, fieldPath)) {\n                  return false;\n                }\n              }\n            }\n          }\n        }\n        return true;\n\n      case 'mutual_exclusion':\n        // Check that only one of the specified fields is present\n        if (rule.fields) {\n          const presentFields = rule.fields.filter(\n            (fieldPath: string) =>\n              this.getNestedValue(data, fieldPath) !== undefined\n          );\n          return presentFields.length <= 1;\n        }\n        return true;\n\n      case 'dependency':\n        // Check that if one field is present, others are required\n        if (rule.trigger && rule.requires) {\n          const triggerPresent =\n            this.getNestedValue(data, rule.trigger) !== undefined;\n\n          if (triggerPresent) {\n            for (const requiredField of rule.requires) {\n              if (this.getNestedValue(data, requiredField) === undefined) {\n                return false;\n              }\n            }\n          }\n        }\n        return true;\n\n      case 'custom':\n        // For custom validations, you would implement your own logic here\n        // This is a placeholder for custom validation functions\n        return true;\n\n      default:\n        throw new Error(`Unknown cross-field validation rule: ${rule.rule}`);\n    }\n  }\n\n  /**\n   * Simple condition evaluator (for production, consider using a safer expression evaluator)\n   */\n  private evaluateCondition(condition: string, data: any): boolean {\n    try {\n      // This is a simplified evaluator. In production, you should use a safer\n      // expression evaluator that doesn't use eval()\n      const context = { input: data.input, config: data.config };\n\n      // Replace field references with actual values\n      let processedCondition = condition;\n\n      // Simple regex-based replacement for common patterns\n      processedCondition = processedCondition.replace(\n        /input\\.(\\w+)/g,\n        (_, fieldName) => {\n          const value = context.input[fieldName];\n          return typeof value === 'string' ? `\"${value}\"` : String(value);\n        }\n      );\n\n      processedCondition = processedCondition.replace(\n        /config\\.(\\w+)/g,\n        (_, fieldName) => {\n          const value = context.config[fieldName];\n          return typeof value === 'string' ? `\"${value}\"` : String(value);\n        }\n      );\n\n      // WARNING: This uses eval() which is dangerous in production\n      // Consider using a proper expression evaluator library\n      return Boolean(eval(processedCondition));\n    } catch {\n      return false;\n    }\n  }\n\n  /**\n   * Gets a nested value from an object using dot notation\n   */\n  private getNestedValue(obj: any, path: string): any {\n    return path.split('.').reduce((current, key) => {\n      return current && current[key] !== undefined ? current[key] : undefined;\n    }, obj);\n  }\n\n  /**\n   * Converts Zod errors to our standardized format\n   */\n  private convertZodErrors(zodError: z.ZodError): ValidationErrorDetail[] {\n    return zodError.issues.map(error => ({\n      path: error.path.map(p => String(p)),\n      code: error.code.toUpperCase(),\n      message: error.message,\n      value: (error as any).received,\n      expected: (error as any).expected,\n      context: {\n        zodError: error,\n      },\n    }));\n  }\n\n  /**\n   * Cache management methods\n   */\n  private generateCacheKey(\n    type: string,\n    schema: any,\n    options: ValidationOptions\n  ): string {\n    const schemaHash = this.hashObject(schema);\n    const optionsHash = this.hashObject(options);\n    return `${type}:${schemaHash}:${optionsHash}`;\n  }\n\n  private getFromCache(cacheKey: string): SchemaCache | null {\n    const cached = this.schemaCache.get(cacheKey);\n\n    if (!cached) {\n      return null;\n    }\n\n    // Check if cache entry is still valid\n    const isExpired =\n      Date.now() - cached.timestamp > ZodSchemaValidator.CACHE_TTL_MS;\n\n    if (isExpired) {\n      this.schemaCache.delete(cacheKey);\n      return null;\n    }\n\n    // Update hit count\n    cached.hitCount++;\n    this.metrics.cacheHits++;\n\n    return cached;\n  }\n\n  private setCache(\n    cacheKey: string,\n    schema: z.ZodSchema,\n    originalSchema: any\n  ): void {\n    // Cleanup old entries if cache is full\n    if (this.schemaCache.size >= ZodSchemaValidator.MAX_CACHE_SIZE) {\n      this.cleanupCache();\n    }\n\n    this.schemaCache.set(cacheKey, {\n      schema,\n      timestamp: Date.now(),\n      hitCount: 0,\n      hash: this.hashObject(originalSchema),\n    });\n  }\n\n  private cleanupCache(): void {\n    // Remove least recently used entries\n    const entries = Array.from(this.schemaCache.entries());\n    entries.sort((a, b) => a[1].timestamp - b[1].timestamp);\n\n    // Remove oldest 25% of entries\n    const toRemove = Math.floor(entries.length * 0.25);\n    for (let i = 0; i < toRemove; i++) {\n      this.schemaCache.delete(entries[i][0]);\n    }\n  }\n\n  private hashObject(obj: any): string {\n    // Simple hash function for caching purposes\n    const str = JSON.stringify(obj, Object.keys(obj).sort());\n    let hash = 0;\n\n    for (let i = 0; i < str.length; i++) {\n      const char = str.charCodeAt(i);\n      hash = (hash << 5) - hash + char;\n      hash = hash & hash; // Convert to 32-bit integer\n    }\n\n    return hash.toString(36);\n  }\n\n  /**\n   * Updates performance metrics\n   */\n  private updateMetrics(durationMs: number, fromCache: boolean): void {\n    this.metrics.totalValidations++;\n    this.metrics.totalDurationMs += durationMs;\n    this.metrics.averageDurationMs =\n      this.metrics.totalDurationMs / this.metrics.totalValidations;\n\n    if (fromCache) {\n      this.metrics.cacheHits++;\n    }\n  }\n\n  /**\n   * Gets performance metrics\n   */\n  getMetrics() {\n    return {\n      ...this.metrics,\n      cacheHitRate:\n        this.metrics.totalValidations > 0\n          ? this.metrics.cacheHits / this.metrics.totalValidations\n          : 0,\n      currentCacheSize: this.schemaCache.size,\n    };\n  }\n\n  /**\n   * Clears all caches and resets metrics\n   */\n  reset(): void {\n    this.schemaCache.clear();\n    this.metrics.totalValidations = 0;\n    this.metrics.cacheHits = 0;\n    this.metrics.averageDurationMs = 0;\n    this.metrics.totalDurationMs = 0;\n  }\n}\n\n/**\n * Legacy compatibility layer for existing SchemaValidator API\n * @deprecated Use ZodSchemaValidator instead\n */\nexport class SchemaValidator {\n  private static validator = new ZodSchemaValidator();\n\n  /**\n   * @deprecated Use ZodSchemaValidator.validateInput instead\n   */\n  static async validateInput(\n    input: ToolInput,\n    schema: Record<string, ToolInputField>\n  ): Promise<void> {\n    const result = await this.validator.validateInput(input, schema);\n\n    if (!result.success) {\n      const errorMessages = result.errors!.map(e => e.message);\n      throw new ValidationError(\n        `Input validation failed: ${errorMessages.join(', ')}`,\n        result.errors![0]?.path.join('.'),\n        { errors: result.errors }\n      );\n    }\n  }\n\n  /**\n   * @deprecated Use ZodSchemaValidator.validateConfig instead\n   */\n  static async validateConfig(\n    config: ToolConfig,\n    schema: Record<string, ToolConfigField>\n  ): Promise<void> {\n    const result = await this.validator.validateConfig(config, schema);\n\n    if (!result.success) {\n      const errorMessages = result.errors!.map(e => e.message);\n      const missingKeys = result\n        .errors!.filter(e => e.code === 'REQUIRED')\n        .map(e => e.path.join('.'));\n\n      throw new ConfigurationError(\n        `Configuration validation failed: ${errorMessages.join(', ')}`,\n        missingKeys\n      );\n    }\n  }\n}\n","/**\n * Field builder system for creating tool input and configuration schemas.\n * This module provides a fluent API for defining validation rules in a type-safe manner.\n *\n * @example\n * ```typescript\n * import { stringField, numberField, enumField } from '@ai-spine/tools-core';\n *\n * const schema = {\n *   input: {\n *     city: stringField()\n *       .required()\n *       .minLength(2)\n *       .maxLength(100)\n *       .description('Name of the city to get weather for')\n *       .example('Madrid'),\n *\n *     temperature_units: enumField(['celsius', 'fahrenheit', 'kelvin'])\n *       .optional()\n *       .default('celsius')\n *       .description('Temperature units for response'),\n *\n *     max_results: numberField()\n *       .optional()\n *       .min(1)\n *       .max(10)\n *       .integer()\n *       .default(5)\n *   },\n *   config: {\n *     apiKey: apiKeyField()\n *       .required()\n *       .description('OpenWeatherMap API key')\n *       .envVar('OPENWEATHER_API_KEY')\n *   }\n * };\n * ```\n */\n\nimport { ToolInputField, ToolConfigField, StringFormat } from './types.js';\nimport {\n  ZodSchemaValidator,\n  ValidationResult,\n  ValidationOptions,\n} from './validation.js';\n\n// ===== INPUT FIELD BUILDERS =====\n\n/**\n * Base builder class for input fields. Provides common validation methods\n * that are shared across all field types.\n */\nabstract class BaseInputFieldBuilder<T extends ToolInputField> {\n  protected field: Partial<T> = {} as Partial<T>;\n\n  /**\n   * Mark this field as required for tool execution\n   */\n  required(): this {\n    this.field.required = true;\n    return this;\n  }\n\n  /**\n   * Mark this field as optional (default behavior)\n   */\n  optional(): this {\n    this.field.required = false;\n    return this;\n  }\n\n  /**\n   * Set a human-readable description for this field\n   */\n  description(desc: string): this {\n    this.field.description = desc;\n    return this;\n  }\n\n  /**\n   * Set a default value for optional fields\n   */\n  default(value: any): this {\n    this.field.default = value;\n    this.field.required = false; // Defaults imply optional\n    return this;\n  }\n\n  /**\n   * Set an example value for documentation and testing\n   */\n  example(value: any): this {\n    this.field.example = value;\n    return this;\n  }\n\n  /**\n   * Mark this field as containing sensitive data\n   */\n  sensitive(): this {\n    this.field.sensitive = true;\n    return this;\n  }\n\n  /**\n   * Enable sanitization for this field\n   */\n  sanitize(): this {\n    this.field.sanitize = true;\n    return this;\n  }\n\n  /**\n   * Set transformation to apply before validation\n   */\n  transform(\n    transformation: 'trim' | 'lowercase' | 'uppercase' | 'normalize'\n  ): this {\n    this.field.transform = transformation;\n    return this;\n  }\n\n  /**\n   * Build the final field definition\n   */\n  abstract build(): T;\n}\n\n/**\n * Builder for string input fields\n */\nclass StringFieldBuilder extends BaseInputFieldBuilder<ToolInputField> {\n  constructor() {\n    super();\n    this.field.type = 'string';\n  }\n\n  /**\n   * Set minimum string length\n   */\n  minLength(length: number): this {\n    this.field.minLength = length;\n    return this;\n  }\n\n  /**\n   * Set maximum string length\n   */\n  maxLength(length: number): this {\n    this.field.maxLength = length;\n    return this;\n  }\n\n  /**\n   * Set regex pattern for validation\n   */\n  pattern(regex: string): this {\n    this.field.pattern = regex;\n    return this;\n  }\n\n  /**\n   * Set string format validation\n   */\n  format(fmt: StringFormat): this {\n    this.field.format = fmt;\n    return this;\n  }\n\n  build(): ToolInputField {\n    return { ...this.field } as ToolInputField;\n  }\n}\n\n/**\n * Builder for number input fields\n */\nclass NumberFieldBuilder extends BaseInputFieldBuilder<ToolInputField> {\n  constructor() {\n    super();\n    this.field.type = 'number';\n  }\n\n  /**\n   * Set minimum numeric value\n   */\n  min(value: number): this {\n    this.field.min = value;\n    return this;\n  }\n\n  /**\n   * Set maximum numeric value\n   */\n  max(value: number): this {\n    this.field.max = value;\n    return this;\n  }\n\n  /**\n   * Require the number to be an integer\n   */\n  integer(): this {\n    this.field.integer = true;\n    return this;\n  }\n\n  /**\n   * Set number of decimal places allowed\n   */\n  precision(places: number): this {\n    this.field.precision = places;\n    return this;\n  }\n\n  build(): ToolInputField {\n    return { ...this.field } as ToolInputField;\n  }\n}\n\n/**\n * Builder for boolean input fields\n */\nclass BooleanFieldBuilder extends BaseInputFieldBuilder<ToolInputField> {\n  constructor() {\n    super();\n    this.field.type = 'boolean';\n  }\n\n  build(): ToolInputField {\n    return { ...this.field } as ToolInputField;\n  }\n}\n\n/**\n * Builder for enum input fields\n */\nclass EnumFieldBuilder extends BaseInputFieldBuilder<ToolInputField> {\n  constructor(values: any[]) {\n    super();\n    this.field.type = 'enum';\n    this.field.enum = values;\n  }\n\n  /**\n   * Set human-readable labels for enum values\n   */\n  labels(labels: string[]): this {\n    this.field.enumLabels = labels;\n    return this;\n  }\n\n  build(): ToolInputField {\n    return { ...this.field } as ToolInputField;\n  }\n}\n\n/**\n * Builder for array input fields\n */\nclass ArrayFieldBuilder extends BaseInputFieldBuilder<ToolInputField> {\n  constructor(itemType: ToolInputField) {\n    super();\n    this.field.type = 'array';\n    this.field.items = itemType;\n  }\n\n  /**\n   * Set minimum array length\n   */\n  minItems(count: number): this {\n    this.field.minItems = count;\n    return this;\n  }\n\n  /**\n   * Set maximum array length\n   */\n  maxItems(count: number): this {\n    this.field.maxItems = count;\n    return this;\n  }\n\n  /**\n   * Require array items to be unique\n   */\n  unique(): this {\n    this.field.uniqueItems = true;\n    return this;\n  }\n\n  build(): ToolInputField {\n    return { ...this.field } as ToolInputField;\n  }\n}\n\n/**\n * Builder for object input fields\n */\nclass ObjectFieldBuilder extends BaseInputFieldBuilder<ToolInputField> {\n  constructor(properties: Record<string, ToolInputField>) {\n    super();\n    this.field.type = 'object';\n    this.field.properties = properties;\n  }\n\n  /**\n   * Set required properties for the object\n   */\n  requiredProperties(props: string[]): this {\n    this.field.requiredProperties = props;\n    return this;\n  }\n\n  /**\n   * Allow additional properties beyond those defined\n   */\n  additionalProperties(allowed: boolean = true): this {\n    this.field.additionalProperties = allowed;\n    return this;\n  }\n\n  build(): ToolInputField {\n    return { ...this.field } as ToolInputField;\n  }\n}\n\n/**\n * Builder for date input fields\n */\nclass DateFieldBuilder extends BaseInputFieldBuilder<ToolInputField> {\n  constructor() {\n    super();\n    this.field.type = 'date';\n  }\n\n  /**\n   * Set minimum date value\n   */\n  minDate(date: string): this {\n    this.field.minDate = date;\n    return this;\n  }\n\n  /**\n   * Set maximum date value\n   */\n  maxDate(date: string): this {\n    this.field.maxDate = date;\n    return this;\n  }\n\n  build(): ToolInputField {\n    return { ...this.field } as ToolInputField;\n  }\n}\n\n/**\n * Builder for datetime input fields\n */\nclass DateTimeFieldBuilder extends BaseInputFieldBuilder<ToolInputField> {\n  constructor() {\n    super();\n    this.field.type = 'datetime';\n  }\n\n  /**\n   * Set minimum datetime value\n   */\n  minDate(date: string): this {\n    this.field.minDate = date;\n    return this;\n  }\n\n  /**\n   * Set maximum datetime value\n   */\n  maxDate(date: string): this {\n    this.field.maxDate = date;\n    return this;\n  }\n\n  /**\n   * Set timezone requirement\n   */\n  timezone(requirement: 'required' | 'optional' | 'utc-only'): this {\n    this.field.timezone = requirement;\n    return this;\n  }\n\n  build(): ToolInputField {\n    return { ...this.field } as ToolInputField;\n  }\n}\n\n/**\n * Builder for file input fields\n */\nclass FileFieldBuilder extends BaseInputFieldBuilder<ToolInputField> {\n  constructor() {\n    super();\n    this.field.type = 'file';\n  }\n\n  /**\n   * Set allowed MIME types\n   */\n  mimeTypes(types: string[]): this {\n    this.field.allowedMimeTypes = types;\n    return this;\n  }\n\n  /**\n   * Set maximum file size in bytes\n   */\n  maxSize(bytes: number): this {\n    this.field.maxFileSize = bytes;\n    return this;\n  }\n\n  build(): ToolInputField {\n    return { ...this.field } as ToolInputField;\n  }\n}\n\n// ===== CONFIG FIELD BUILDERS =====\n\n/**\n * Base builder for configuration fields\n */\nabstract class BaseConfigFieldBuilder<T extends ToolConfigField> {\n  protected field: Partial<T> = {} as Partial<T>;\n\n  /**\n   * Mark this configuration field as required\n   */\n  required(): this {\n    this.field.required = true;\n    return this;\n  }\n\n  /**\n   * Mark this configuration field as optional\n   */\n  optional(): this {\n    this.field.required = false;\n    return this;\n  }\n\n  /**\n   * Set description for this configuration field\n   */\n  description(desc: string): this {\n    this.field.description = desc;\n    return this;\n  }\n\n  /**\n   * Set default value for optional configuration\n   */\n  default(value: any): this {\n    this.field.default = value;\n    this.field.required = false;\n    return this;\n  }\n\n  /**\n   * Mark this field as containing sensitive data\n   */\n  secret(): this {\n    this.field.secret = true;\n    return this;\n  }\n\n  /**\n   * Set example value for documentation\n   */\n  example(value: any): this {\n    this.field.example = value;\n    return this;\n  }\n\n  /**\n   * Set environment variable name for loading this config\n   */\n  envVar(name: string): this {\n    this.field.envVar = name;\n    return this;\n  }\n\n  /**\n   * Set category for grouping related configs\n   */\n  category(cat: string): this {\n    this.field.category = cat;\n    return this;\n  }\n\n  /**\n   * Allow runtime override of this configuration\n   */\n  allowRuntimeOverride(): this {\n    this.field.allowRuntimeOverride = true;\n    return this;\n  }\n\n  abstract build(): T;\n}\n\n/**\n * Builder for API key configuration fields\n */\nclass ApiKeyFieldBuilder extends BaseConfigFieldBuilder<ToolConfigField> {\n  constructor() {\n    super();\n    this.field.type = 'apiKey';\n    this.field.secret = true; // API keys are always secret\n  }\n\n  /**\n   * Set regex pattern for API key validation\n   */\n  pattern(regex: string): this {\n    this.field.validation = { ...this.field.validation, pattern: regex };\n    return this;\n  }\n\n  /**\n   * Set custom error message for validation failures\n   */\n  errorMessage(message: string): this {\n    this.field.validation = { ...this.field.validation, errorMessage: message };\n    return this;\n  }\n\n  build(): ToolConfigField {\n    return { ...this.field } as ToolConfigField;\n  }\n}\n\n/**\n * Builder for string configuration fields\n */\nclass ConfigStringFieldBuilder extends BaseConfigFieldBuilder<ToolConfigField> {\n  constructor() {\n    super();\n    this.field.type = 'string';\n  }\n\n  /**\n   * Set minimum string length\n   */\n  minLength(length: number): this {\n    this.field.validation = { ...this.field.validation, min: length };\n    return this;\n  }\n\n  /**\n   * Set maximum string length\n   */\n  maxLength(length: number): this {\n    this.field.validation = { ...this.field.validation, max: length };\n    return this;\n  }\n\n  /**\n   * Set regex pattern for validation\n   */\n  pattern(regex: string): this {\n    this.field.validation = { ...this.field.validation, pattern: regex };\n    return this;\n  }\n\n  build(): ToolConfigField {\n    return { ...this.field } as ToolConfigField;\n  }\n}\n\n/**\n * Builder for URL configuration fields\n */\nclass UrlConfigFieldBuilder extends BaseConfigFieldBuilder<ToolConfigField> {\n  constructor() {\n    super();\n    this.field.type = 'url';\n  }\n\n  /**\n   * Set allowed protocols (e.g., ['https', 'http'])\n   */\n  protocols(protocols: string[]): this {\n    this.field.validation = {\n      ...this.field.validation,\n      allowedProtocols: protocols,\n    };\n    return this;\n  }\n\n  build(): ToolConfigField {\n    return { ...this.field } as ToolConfigField;\n  }\n}\n\n/**\n * Builder for enum configuration fields\n */\nclass ConfigEnumFieldBuilder extends BaseConfigFieldBuilder<ToolConfigField> {\n  constructor(values: any[]) {\n    super();\n    this.field.type = 'enum';\n    this.field.validation = { enum: values };\n  }\n\n  build(): ToolConfigField {\n    return { ...this.field } as ToolConfigField;\n  }\n}\n\n// ===== EXPORTED FACTORY FUNCTIONS =====\n\n/**\n * Create a string input field builder\n */\nexport function stringField(): StringFieldBuilder {\n  return new StringFieldBuilder();\n}\n\n/**\n * Create a number input field builder\n */\nexport function numberField(): NumberFieldBuilder {\n  return new NumberFieldBuilder();\n}\n\n/**\n * Create a boolean input field builder\n */\nexport function booleanField(): BooleanFieldBuilder {\n  return new BooleanFieldBuilder();\n}\n\n/**\n * Create an enum input field builder\n */\nexport function enumField(values: any[]): EnumFieldBuilder {\n  return new EnumFieldBuilder(values);\n}\n\n/**\n * Create an array input field builder\n */\nexport function arrayField(itemType: ToolInputField): ArrayFieldBuilder {\n  return new ArrayFieldBuilder(itemType);\n}\n\n/**\n * Create an object input field builder\n */\nexport function objectField(\n  properties: Record<string, ToolInputField>\n): ObjectFieldBuilder {\n  return new ObjectFieldBuilder(properties);\n}\n\n/**\n * Create a date input field builder\n */\nexport function dateField(): DateFieldBuilder {\n  return new DateFieldBuilder();\n}\n\n/**\n * Create a datetime input field builder\n */\nexport function datetimeField(): DateTimeFieldBuilder {\n  return new DateTimeFieldBuilder();\n}\n\n/**\n * Create a file input field builder\n */\nexport function fileField(): FileFieldBuilder {\n  return new FileFieldBuilder();\n}\n\n/**\n * Create an API key configuration field builder\n */\nexport function apiKeyField(): ApiKeyFieldBuilder {\n  return new ApiKeyFieldBuilder();\n}\n\n/**\n * Create a string configuration field builder\n */\nexport function configStringField(): ConfigStringFieldBuilder {\n  return new ConfigStringFieldBuilder();\n}\n\n/**\n * Create a URL configuration field builder\n */\nexport function urlConfigField(): UrlConfigFieldBuilder {\n  return new UrlConfigFieldBuilder();\n}\n\n/**\n * Create an enum configuration field builder\n */\nexport function configEnumField(values: any[]): ConfigEnumFieldBuilder {\n  return new ConfigEnumFieldBuilder(values);\n}\n\n// ===== CONVENIENCE FUNCTIONS =====\n\n/**\n * Quick builder for commonly used email fields\n */\nexport function emailField(): StringFieldBuilder {\n  return stringField().format('email').transform('lowercase');\n}\n\n/**\n * Quick builder for commonly used URL fields\n */\nexport function urlField(): StringFieldBuilder {\n  return stringField().format('url');\n}\n\n/**\n * Quick builder for UUID fields\n */\nexport function uuidField(): StringFieldBuilder {\n  return stringField().format('uuid');\n}\n\n/**\n * Quick builder for time fields\n */\nexport function timeField(): BaseInputFieldBuilder<ToolInputField> {\n  return new (class extends BaseInputFieldBuilder<ToolInputField> {\n    constructor() {\n      super();\n      this.field.type = 'time';\n    }\n    build(): ToolInputField {\n      return { ...this.field } as ToolInputField;\n    }\n  })();\n}\n\n// ===== DOCUMENTATION GENERATION UTILITIES =====\n\n/**\n * Documentation generator that creates OpenAPI-style documentation from field definitions\n */\nexport class DocumentationGenerator {\n  /**\n   * Generate OpenAPI schema from field definition\n   */\n  static generateOpenAPISchema(field: ToolInputField | ToolConfigField): any {\n    const schema: any = {\n      type: this.mapToOpenAPIType(field.type),\n    };\n\n    // Add description\n    if (field.description) {\n      schema.description = field.description;\n    }\n\n    // Add example\n    if (field.example !== undefined) {\n      schema.example = field.example;\n    }\n\n    // Add default value\n    if (field.default !== undefined) {\n      schema.default = field.default;\n    }\n\n    // Type-specific properties\n    switch (field.type) {\n      case 'string':\n        this.addStringProperties(schema, field);\n        break;\n      case 'number':\n        this.addNumberProperties(schema, field);\n        break;\n      case 'array':\n        this.addArrayProperties(schema, field);\n        break;\n      case 'object':\n        this.addObjectProperties(schema, field);\n        break;\n      case 'enum':\n        this.addEnumProperties(schema, field);\n        break;\n      case 'date':\n        schema.format = 'date';\n        this.addDateProperties(schema, field);\n        break;\n      case 'datetime':\n        schema.format = 'date-time';\n        this.addDateProperties(schema, field);\n        break;\n      case 'time':\n        schema.format = 'time';\n        break;\n      case 'file':\n        schema.format = 'binary';\n        this.addFileProperties(schema, field);\n        break;\n    }\n\n    return schema;\n  }\n\n  private static mapToOpenAPIType(type: string): string {\n    const typeMap: Record<string, string> = {\n      string: 'string',\n      number: 'number',\n      boolean: 'boolean',\n      array: 'array',\n      object: 'object',\n      date: 'string',\n      datetime: 'string',\n      time: 'string',\n      email: 'string',\n      url: 'string',\n      uuid: 'string',\n      json: 'object',\n      file: 'string',\n      enum: 'string',\n      apiKey: 'string',\n    };\n    return typeMap[type] || 'string';\n  }\n\n  private static addStringProperties(\n    schema: any,\n    field: ToolInputField | ToolConfigField\n  ) {\n    if ('minLength' in field && field.minLength !== undefined)\n      schema.minLength = field.minLength;\n    if ('maxLength' in field && field.maxLength !== undefined)\n      schema.maxLength = field.maxLength;\n    if ('pattern' in field && field.pattern) schema.pattern = field.pattern;\n    if ('format' in field && field.format) schema.format = field.format;\n\n    // Add validation properties\n    if ('validation' in field && field.validation) {\n      if (field.validation.min !== undefined)\n        schema.minLength = field.validation.min;\n      if (field.validation.max !== undefined)\n        schema.maxLength = field.validation.max;\n      if (field.validation.pattern) schema.pattern = field.validation.pattern;\n    }\n  }\n\n  private static addNumberProperties(\n    schema: any,\n    field: ToolInputField | ToolConfigField\n  ) {\n    if ('min' in field && field.min !== undefined) schema.minimum = field.min;\n    if ('max' in field && field.max !== undefined) schema.maximum = field.max;\n    if ('integer' in field && field.integer) schema.type = 'integer';\n\n    // Add validation properties\n    if ('validation' in field && field.validation) {\n      if (field.validation.min !== undefined)\n        schema.minimum = field.validation.min;\n      if (field.validation.max !== undefined)\n        schema.maximum = field.validation.max;\n    }\n  }\n\n  private static addArrayProperties(\n    schema: any,\n    field: ToolInputField | ToolConfigField\n  ) {\n    if ('items' in field && field.items) {\n      schema.items = this.generateOpenAPISchema(field.items);\n    }\n    if ('minItems' in field && field.minItems !== undefined)\n      schema.minItems = field.minItems;\n    if ('maxItems' in field && field.maxItems !== undefined)\n      schema.maxItems = field.maxItems;\n    if ('uniqueItems' in field && field.uniqueItems) schema.uniqueItems = true;\n\n    // Add validation properties from field.validation\n    // Note: Array validation properties would need to be added to the validation type interface\n  }\n\n  private static addObjectProperties(\n    schema: any,\n    field: ToolInputField | ToolConfigField\n  ) {\n    if ('properties' in field && field.properties) {\n      schema.properties = {};\n      for (const [key, prop] of Object.entries(field.properties)) {\n        schema.properties[key] = this.generateOpenAPISchema(prop);\n      }\n    }\n    if ('requiredProperties' in field && field.requiredProperties?.length) {\n      schema.required = field.requiredProperties;\n    }\n    if (\n      'additionalProperties' in field &&\n      field.additionalProperties !== undefined\n    ) {\n      schema.additionalProperties = field.additionalProperties;\n    }\n  }\n\n  private static addEnumProperties(\n    schema: any,\n    field: ToolInputField | ToolConfigField\n  ) {\n    if ('enum' in field && field.enum) {\n      schema.enum = field.enum;\n    }\n    // Handle config enum fields that store enum in validation\n    if (\n      'validation' in field &&\n      field.validation &&\n      'enum' in field.validation\n    ) {\n      schema.enum = field.validation.enum;\n    }\n  }\n\n  private static addDateProperties(\n    schema: any,\n    field: ToolInputField | ToolConfigField\n  ) {\n    if ('minDate' in field && field.minDate) schema.minimum = field.minDate;\n    if ('maxDate' in field && field.maxDate) schema.maximum = field.maxDate;\n  }\n\n  private static addFileProperties(\n    schema: any,\n    field: ToolInputField | ToolConfigField\n  ) {\n    if ('allowedMimeTypes' in field && field.allowedMimeTypes?.length) {\n      schema.contentMediaType = field.allowedMimeTypes[0];\n      if (field.allowedMimeTypes.length > 1) {\n        schema['x-allowed-mime-types'] = field.allowedMimeTypes;\n      }\n    }\n    if ('maxFileSize' in field && field.maxFileSize) {\n      schema['x-max-file-size'] = field.maxFileSize;\n    }\n  }\n\n  /**\n   * Generate complete tool documentation from schema\n   */\n  static generateToolDocumentation(\n    schema: {\n      input?: Record<string, ToolInputField>;\n      config?: Record<string, ToolConfigField>;\n    },\n    metadata?: { name?: string; description?: string; version?: string }\n  ) {\n    const doc: any = {\n      openapi: '3.0.3',\n      info: {\n        title: metadata?.name || 'AI Spine Tool',\n        description: metadata?.description || 'An AI Spine compatible tool',\n        version: metadata?.version || '1.0.0',\n      },\n      paths: {\n        '/api/execute': {\n          post: {\n            summary: 'Execute the tool',\n            requestBody: {\n              required: true,\n              content: {\n                'application/json': {\n                  schema: {\n                    type: 'object',\n                    properties: {},\n                    required: [],\n                  },\n                },\n              },\n            },\n            responses: {\n              '200': {\n                description: 'Tool execution successful',\n                content: {\n                  'application/json': {\n                    schema: {\n                      type: 'object',\n                      properties: {\n                        success: { type: 'boolean' },\n                        data: { type: 'object' },\n                        executionTime: { type: 'number' },\n                        executionId: { type: 'string' },\n                      },\n                    },\n                  },\n                },\n              },\n              '400': {\n                description: 'Validation error',\n                content: {\n                  'application/json': {\n                    schema: {\n                      type: 'object',\n                      properties: {\n                        success: { type: 'boolean', enum: [false] },\n                        error: { type: 'string' },\n                        errors: {\n                          type: 'array',\n                          items: {\n                            type: 'object',\n                            properties: {\n                              path: {\n                                type: 'array',\n                                items: { type: 'string' },\n                              },\n                              code: { type: 'string' },\n                              message: { type: 'string' },\n                            },\n                          },\n                        },\n                      },\n                    },\n                  },\n                },\n              },\n            },\n          },\n        },\n        '/health': {\n          get: {\n            summary: 'Get tool health status',\n            responses: {\n              '200': {\n                description: 'Tool health information',\n                content: {\n                  'application/json': {\n                    schema: {\n                      type: 'object',\n                      properties: {\n                        status: {\n                          type: 'string',\n                          enum: ['healthy', 'degraded', 'unhealthy'],\n                        },\n                        uptime: { type: 'number' },\n                        version: { type: 'string' },\n                        metrics: { type: 'object' },\n                      },\n                    },\n                  },\n                },\n              },\n            },\n          },\n        },\n        '/schema': {\n          get: {\n            summary: 'Get tool schema documentation',\n            responses: {\n              '200': {\n                description: 'Tool schema information',\n                content: {\n                  'application/json': {\n                    schema: {\n                      type: 'object',\n                      properties: {\n                        metadata: { type: 'object' },\n                        schema: { type: 'object' },\n                        openapi: { type: 'object' },\n                      },\n                    },\n                  },\n                },\n              },\n            },\n          },\n        },\n      },\n    };\n\n    // Add input and config properties to request schema\n    const requestSchema =\n      doc.paths['/api/execute'].post.requestBody.content['application/json']\n        .schema;\n\n    if (schema.input && Object.keys(schema.input).length > 0) {\n      requestSchema.properties.input_data = {\n        type: 'object',\n        properties: {},\n        required: [],\n      };\n\n      for (const [key, field] of Object.entries(schema.input)) {\n        requestSchema.properties.input_data.properties[key] =\n          this.generateOpenAPISchema(field);\n        if (field.required) {\n          requestSchema.properties.input_data.required.push(key);\n        }\n      }\n\n      requestSchema.required.push('input_data');\n    }\n\n    if (schema.config && Object.keys(schema.config).length > 0) {\n      requestSchema.properties.config = {\n        type: 'object',\n        properties: {},\n        required: [],\n      };\n\n      for (const [key, field] of Object.entries(schema.config)) {\n        requestSchema.properties.config.properties[key] =\n          this.generateOpenAPISchema(field);\n        if (field.required) {\n          requestSchema.properties.config.required.push(key);\n        }\n      }\n    }\n\n    return doc;\n  }\n}\n\n// ===== SCHEMA VALIDATION UTILITIES =====\n\n/**\n * Schema builder class that provides direct validation capabilities\n * along with field building functionality\n */\nexport class SchemaBuilder {\n  private inputFields: Record<string, ToolInputField> = {};\n  private configFields: Record<string, ToolConfigField> = {};\n  private validator = new ZodSchemaValidator();\n\n  /**\n   * Add an input field to the schema\n   */\n  addInput(name: string, field: ToolInputField): this {\n    this.inputFields[name] = field;\n    return this;\n  }\n\n  /**\n   * Add a config field to the schema\n   */\n  addConfig(name: string, field: ToolConfigField): this {\n    this.configFields[name] = field;\n    return this;\n  }\n\n  /**\n   * Build the complete schema\n   */\n  build() {\n    return {\n      input: { ...this.inputFields },\n      config: { ...this.configFields },\n    };\n  }\n\n  /**\n   * Validate input data against the current schema\n   */\n  async validateInput(\n    data: any,\n    options?: ValidationOptions\n  ): Promise<ValidationResult> {\n    return this.validator.validateInput(data, this.inputFields, options);\n  }\n\n  /**\n   * Validate config data against the current schema\n   */\n  async validateConfig(\n    data: any,\n    options?: ValidationOptions\n  ): Promise<ValidationResult> {\n    return this.validator.validateConfig(data, this.configFields, options);\n  }\n\n  /**\n   * Validate complete tool data (input + config)\n   */\n  async validateToolData(\n    data: { input: any; config: any },\n    options?: ValidationOptions\n  ): Promise<ValidationResult> {\n    const schema = {\n      input: this.inputFields,\n      config: this.configFields,\n    };\n\n    return this.validator.validateToolSchema(data, schema, options);\n  }\n\n  /**\n   * Test a single field value against its definition\n   */\n  async testField(\n    fieldName: string,\n    value: any,\n    type: 'input' | 'config' = 'input'\n  ): Promise<ValidationResult> {\n    const fields = type === 'input' ? this.inputFields : this.configFields;\n    const field = fields[fieldName];\n\n    if (!field) {\n      return {\n        success: false,\n        errors: [\n          {\n            path: [fieldName],\n            code: 'FIELD_NOT_FOUND',\n            message: `Field '${fieldName}' not found in ${type} schema`,\n          },\n        ],\n      };\n    }\n\n    const testSchema = { [fieldName]: field };\n    const testData = { [fieldName]: value };\n\n    if (type === 'input') {\n      return this.validator.validateInput(\n        testData,\n        testSchema as Record<string, ToolInputField>\n      );\n    } else {\n      return this.validator.validateConfig(\n        testData,\n        testSchema as Record<string, ToolConfigField>\n      );\n    }\n  }\n\n  /**\n   * Get performance metrics from the validator\n   */\n  getMetrics() {\n    return this.validator.getMetrics();\n  }\n\n  /**\n   * Reset validator cache and metrics\n   */\n  reset(): void {\n    this.validator.reset();\n  }\n\n  /**\n   * Generate OpenAPI documentation for the current schema\n   */\n  generateDocumentation(metadata?: {\n    name?: string;\n    description?: string;\n    version?: string;\n  }) {\n    const schema = this.build();\n    return DocumentationGenerator.generateToolDocumentation(schema, metadata);\n  }\n\n  /**\n   * Generate example request data based on the schema\n   */\n  generateExampleRequest(): { input_data?: any; config?: any } {\n    const result: any = {};\n\n    // Generate example input data\n    if (Object.keys(this.inputFields).length > 0) {\n      result.input_data = {};\n      for (const [key, field] of Object.entries(this.inputFields)) {\n        result.input_data[key] = this.generateExampleValue(field);\n      }\n    }\n\n    // Generate example config data\n    if (Object.keys(this.configFields).length > 0) {\n      result.config = {};\n      for (const [key, field] of Object.entries(this.configFields)) {\n        result.config[key] = this.generateExampleValue(field);\n      }\n    }\n\n    return result;\n  }\n\n  /**\n   * Generate an example value for a field\n   */\n  private generateExampleValue(field: ToolInputField | ToolConfigField): any {\n    // Use explicit example if provided\n    if (field.example !== undefined) {\n      return field.example;\n    }\n\n    // Use default value if provided\n    if (field.default !== undefined) {\n      return field.default;\n    }\n\n    // Generate based on field type\n    switch (field.type) {\n      case 'string':\n        if ('format' in field) {\n          if (field.format === 'email') return 'user@example.com';\n          if (field.format === 'url') return 'https://example.com';\n          if (field.format === 'uuid')\n            return '550e8400-e29b-41d4-a716-446655440000';\n        }\n        if ('enum' in field && field.enum) return field.enum[0];\n        return 'example string';\n\n      case 'number': {\n        if (\n          'min' in field &&\n          'max' in field &&\n          field.min !== undefined &&\n          field.max !== undefined\n        ) {\n          return Math.floor((field.min + field.max) / 2);\n        }\n        if ('min' in field && field.min !== undefined) return field.min;\n        if ('max' in field && field.max !== undefined) return field.max;\n        const isInteger = 'integer' in field && field.integer;\n        return isInteger ? 42 : 42.5;\n      }\n\n      case 'boolean':\n        return true;\n\n      case 'array':\n        if ('items' in field && field.items) {\n          const itemExample = this.generateExampleValue(field.items);\n          return [itemExample];\n        }\n        return ['item'];\n\n      case 'object': {\n        const objExample: any = {};\n        if ('properties' in field && field.properties) {\n          for (const [key, prop] of Object.entries(field.properties)) {\n            objExample[key] = this.generateExampleValue(prop);\n          }\n        }\n        return objExample;\n      }\n\n      case 'date':\n        return '2023-12-25';\n\n      case 'datetime':\n        return '2023-12-25T12:00:00Z';\n\n      case 'time':\n        return '12:00:00';\n\n      case 'enum':\n        if ('enum' in field && field.enum) return field.enum[0];\n        // Handle config enum fields\n        if (\n          'validation' in field &&\n          field.validation &&\n          'enum' in field.validation &&\n          field.validation.enum\n        ) {\n          return field.validation.enum[0];\n        }\n        return 'option1';\n\n      case 'apiKey':\n        return 'sk-xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx';\n\n      case 'file':\n        return 'file.txt';\n\n      default:\n        return 'example value';\n    }\n  }\n}\n\n/**\n * Create a new schema builder instance\n */\nexport function createSchema(): SchemaBuilder {\n  return new SchemaBuilder();\n}\n\n/**\n * Validate a single field value quickly without building a full schema\n */\nexport async function validateField(\n  field: ToolInputField | ToolConfigField,\n  value: any,\n  fieldName: string = 'field',\n  options?: ValidationOptions\n): Promise<ValidationResult> {\n  const validator = new ZodSchemaValidator();\n  const schema = { [fieldName]: field };\n  const data = { [fieldName]: value };\n\n  // Check if this is a config field by looking at the type\n  const isConfigField =\n    'type' in field &&\n    (field.type === 'apiKey' ||\n      field.type === 'secret' ||\n      (field.type === 'url' && 'validation' in field) ||\n      (field.type === 'json' &&\n        'validation' in field &&\n        'jsonSchema' in (field.validation || {})));\n\n  if (isConfigField) {\n    // This is a config field\n    return validator.validateConfig(\n      data,\n      schema as Record<string, ToolConfigField>,\n      options\n    );\n  } else {\n    // This is an input field\n    return validator.validateInput(\n      data,\n      schema as Record<string, ToolInputField>,\n      options\n    );\n  }\n}\n\n/**\n * Create a validation function for a specific schema\n */\nexport function createValidator(schema: {\n  input?: Record<string, ToolInputField>;\n  config?: Record<string, ToolConfigField>;\n}) {\n  const validator = new ZodSchemaValidator();\n\n  return {\n    /**\n     * Validate input data\n     */\n    validateInput: async (data: any, options?: ValidationOptions) => {\n      if (!schema.input) {\n        throw new Error('No input schema defined');\n      }\n      return validator.validateInput(data, schema.input, options);\n    },\n\n    /**\n     * Validate config data\n     */\n    validateConfig: async (data: any, options?: ValidationOptions) => {\n      if (!schema.config) {\n        throw new Error('No config schema defined');\n      }\n      return validator.validateConfig(data, schema.config, options);\n    },\n\n    /**\n     * Validate complete tool data\n     */\n    validateToolData: async (\n      data: { input: any; config: any },\n      options?: ValidationOptions\n    ) => {\n      if (!schema.input || !schema.config) {\n        throw new Error('Both input and config schemas must be defined');\n      }\n      return validator.validateToolSchema(\n        data,\n        {\n          input: schema.input,\n          config: schema.config,\n        },\n        options\n      );\n    },\n\n    /**\n     * Generate OpenAPI documentation for the schema\n     */\n    generateDocumentation: (metadata?: {\n      name?: string;\n      description?: string;\n      version?: string;\n    }) => {\n      return DocumentationGenerator.generateToolDocumentation(schema, metadata);\n    },\n\n    /**\n     * Get performance metrics\n     */\n    getMetrics: () => validator.getMetrics(),\n\n    /**\n     * Reset cache and metrics\n     */\n    reset: () => validator.reset(),\n  };\n}\n\n// ===== VALIDATION HELPERS =====\n\n/**\n * Quick validation functions for common patterns\n */\nexport const validate = {\n  /**\n   * Validate an email address\n   */\n  email: async (value: any): Promise<ValidationResult> => {\n    return validateField(emailField().required().build(), value, 'email');\n  },\n\n  /**\n   * Validate a URL\n   */\n  url: async (value: any): Promise<ValidationResult> => {\n    return validateField(urlField().required().build(), value, 'url');\n  },\n\n  /**\n   * Validate a UUID\n   */\n  uuid: async (value: any): Promise<ValidationResult> => {\n    return validateField(uuidField().required().build(), value, 'uuid');\n  },\n\n  /**\n   * Validate an API key\n   */\n  apiKey: async (value: any, pattern?: string): Promise<ValidationResult> => {\n    const field = apiKeyField().required();\n    if (pattern) {\n      field.pattern(pattern);\n    }\n    return validateField(field.build(), value, 'apiKey');\n  },\n\n  /**\n   * Validate a positive integer\n   */\n  positiveInteger: async (value: any): Promise<ValidationResult> => {\n    return validateField(\n      numberField().required().min(1).integer().build(),\n      value,\n      'positiveInteger'\n    );\n  },\n\n  /**\n   * Validate a non-empty string\n   */\n  nonEmptyString: async (value: any): Promise<ValidationResult> => {\n    return validateField(\n      stringField().required().minLength(1).build(),\n      value,\n      'nonEmptyString'\n    );\n  },\n\n  /**\n   * Validate an array of strings\n   */\n  stringArray: async (\n    value: any,\n    minItems?: number,\n    maxItems?: number\n  ): Promise<ValidationResult> => {\n    const field = arrayField(stringField().required().build()).required();\n    if (minItems !== undefined) field.minItems(minItems);\n    if (maxItems !== undefined) field.maxItems(maxItems);\n    return validateField(field.build(), value, 'stringArray');\n  },\n};\n","import { ToolExecutionResult, ToolError } from './types';\n\nexport class ToolUtils {\n  /**\n   * Creates a successful tool execution result\n   */\n  static success(\n    data: any,\n    metadata?: Record<string, any>\n  ): ToolExecutionResult {\n    return {\n      status: 'success',\n      data,\n      metadata: metadata ? { custom: metadata } : undefined,\n    };\n  }\n\n  /**\n   * Creates an error tool execution result\n   */\n  static error(\n    message: string,\n    code: string = 'TOOL_ERROR',\n    details?: any\n  ): ToolExecutionResult {\n    return {\n      status: 'error',\n      error: {\n        code,\n        message,\n        type: 'execution_error',\n        details,\n      },\n    };\n  }\n\n  /**\n   * Creates an error result from a ToolError instance\n   */\n  static errorFromException(error: ToolError): ToolExecutionResult {\n    return {\n      status: 'error',\n      error: {\n        code: error.code,\n        message: error.message,\n        type: 'execution_error',\n        details: error.details,\n      },\n    };\n  }\n\n  /**\n   * Safely executes a function and returns a tool result\n   */\n  static async safeExecute<T>(\n    fn: () => Promise<T>\n  ): Promise<ToolExecutionResult> {\n    const startTime = Date.now();\n    const startedAt = new Date().toISOString();\n\n    try {\n      const result = await fn();\n      const executionTime = Date.now() - startTime;\n      const completedAt = new Date().toISOString();\n\n      return {\n        status: 'success',\n        data: result,\n        timing: {\n          executionTimeMs: executionTime,\n          startedAt,\n          completedAt,\n        },\n      };\n    } catch (error) {\n      const executionTime = Date.now() - startTime;\n      const completedAt = new Date().toISOString();\n\n      if (error instanceof ToolError) {\n        return {\n          ...this.errorFromException(error),\n          timing: {\n            executionTimeMs: executionTime,\n            startedAt,\n            completedAt,\n          },\n        };\n      }\n\n      return {\n        status: 'error',\n        error: {\n          code: 'UNEXPECTED_ERROR',\n          message: error instanceof Error ? error.message : String(error),\n          type: 'execution_error',\n        },\n        timing: {\n          executionTimeMs: executionTime,\n          startedAt,\n          completedAt,\n        },\n      };\n    }\n  }\n\n  /**\n   * Generates a unique execution ID\n   */\n  static generateExecutionId(): string {\n    const timestamp = Date.now().toString(36);\n    const random = Math.random().toString(36).substring(2);\n    return `exec_${timestamp}_${random}`;\n  }\n\n  /**\n   * Validates that a value is not null or undefined\n   */\n  static required<T>(value: T | null | undefined, fieldName: string): T {\n    if (value === null || value === undefined) {\n      throw new Error(`Required field '${fieldName}' is missing`);\n    }\n    return value;\n  }\n\n  /**\n   * Deep clones an object\n   */\n  static deepClone<T>(obj: T): T {\n    if (obj === null || typeof obj !== 'object') {\n      return obj;\n    }\n\n    if (obj instanceof Date) {\n      return new Date(obj.getTime()) as unknown as T;\n    }\n\n    if (Array.isArray(obj)) {\n      return obj.map(item => this.deepClone(item)) as unknown as T;\n    }\n\n    const cloned = {} as T;\n    for (const key in obj) {\n      if (Object.prototype.hasOwnProperty.call(obj, key)) {\n        cloned[key] = this.deepClone(obj[key]);\n      }\n    }\n\n    return cloned;\n  }\n\n  /**\n   * Sanitizes configuration by removing secret fields for logging\n   */\n  static sanitizeConfig(\n    config: Record<string, any>,\n    secretFields: string[] = []\n  ): Record<string, any> {\n    const sanitized = { ...config };\n\n    // Default secret field patterns\n    const defaultSecretPatterns = [\n      /api[_-]?key/i,\n      /secret/i,\n      /token/i,\n      /password/i,\n      /private[_-]?key/i,\n    ];\n\n    for (const key of Object.keys(sanitized)) {\n      const isSecret =\n        secretFields.includes(key) ||\n        defaultSecretPatterns.some(pattern => pattern.test(key));\n\n      if (isSecret && sanitized[key]) {\n        sanitized[key] = '***REDACTED***';\n      }\n    }\n\n    return sanitized;\n  }\n\n  /**\n   * Formats error messages for better readability\n   */\n  static formatErrorMessage(error: unknown): string {\n    if (error instanceof Error) {\n      return error.message;\n    }\n\n    if (typeof error === 'string') {\n      return error;\n    }\n\n    try {\n      return JSON.stringify(error);\n    } catch {\n      return String(error);\n    }\n  }\n\n  /**\n   * Checks if a URL is valid\n   */\n  static isValidUrl(url: string): boolean {\n    try {\n      new URL(url);\n      return true;\n    } catch {\n      return false;\n    }\n  }\n\n  /**\n   * Debounces a function\n   */\n  static debounce<T extends (...args: any[]) => any>(\n    func: T,\n    wait: number\n  ): (...args: Parameters<T>) => void {\n    let timeout: NodeJS.Timeout;\n\n    return (...args: Parameters<T>) => {\n      clearTimeout(timeout);\n      timeout = setTimeout(() => func(...args), wait);\n    };\n  }\n\n  /**\n   * Creates a timeout promise that rejects after the specified time\n   */\n  static timeout<T>(promise: Promise<T>, ms: number): Promise<T> {\n    return Promise.race([\n      promise,\n      new Promise<never>((_, reject) =>\n        setTimeout(\n          () => reject(new Error(`Operation timed out after ${ms}ms`)),\n          ms\n        )\n      ),\n    ]);\n  }\n\n  /**\n   * Retry function with exponential backoff\n   */\n  static async retry<T>(\n    fn: () => Promise<T>,\n    options: {\n      attempts?: number;\n      delay?: number;\n      backoff?: number;\n      shouldRetry?: (error: any) => boolean;\n    } = {}\n  ): Promise<T> {\n    const {\n      attempts = 3,\n      delay = 1000,\n      backoff = 2,\n      shouldRetry = () => true,\n    } = options;\n\n    let lastError: any;\n\n    for (let attempt = 1; attempt <= attempts; attempt++) {\n      try {\n        return await fn();\n      } catch (error) {\n        lastError = error;\n\n        if (attempt === attempts || !shouldRetry(error)) {\n          throw error;\n        }\n\n        const waitTime = delay * Math.pow(backoff, attempt - 1);\n        await new Promise(resolve => setTimeout(resolve, waitTime));\n      }\n    }\n\n    throw lastError;\n  }\n}\n","import express, { Request, Response, NextFunction, Application } from 'express';\nimport cors from 'cors';\nimport helmet from 'helmet';\nimport rateLimit from 'express-rate-limit';\nimport { createHash, randomUUID } from 'crypto';\nimport { performance } from 'perf_hooks';\n\nimport {\n  ToolDefinition,\n  ToolExecutionContext,\n  ToolExecutionResult,\n  ToolMetadata,\n  ToolSchema,\n  ToolInput,\n  ToolConfig,\n  // ToolHealthCheck, // Commented out - not used\n  ToolError,\n  ValidationError,\n  ConfigurationError,\n  ExecutionError,\n  AISpineExecuteRequest,\n  AISpineExecuteResponse,\n  AISpineHealthResponse,\n} from './types.js';\nimport { ZodSchemaValidator } from './validation.js';\nimport { DocumentationGenerator } from './field-builders.js';\n\n/**\n * Configuration options for Tool server setup\n *\n * @example\n * ```typescript\n * const serverConfig: ToolServerConfig = {\n *   port: 3000,\n *   host: '0.0.0.0',\n *   cors: {\n *     origin: ['http://localhost:3000', 'https://myapp.com'],\n *     credentials: true\n *   },\n *   rateLimit: {\n *     windowMs: 15 * 60 * 1000, // 15 minutes\n *     max: 100 // limit each IP to 100 requests per windowMs\n *   },\n *   security: {\n *     apiKeys: ['your-api-key-here'],\n *     requireAuth: true\n *   },\n *   monitoring: {\n *     enableMetrics: true,\n *     metricsRetention: 24 * 60 * 60 * 1000 // 24 hours\n *   }\n * }\n * ```\n */\nexport interface ToolServerConfig {\n  /** Port number for the HTTP server */\n  port?: number;\n\n  /** Host address to bind to */\n  host?: string;\n\n  /** CORS configuration */\n  cors?: {\n    /** Allowed origins for CORS */\n    origin?: string | string[] | boolean;\n    /** Whether to allow credentials */\n    credentials?: boolean;\n    /** Allowed headers */\n    allowedHeaders?: string[];\n    /** Allowed methods */\n    methods?: string[];\n  };\n\n  /** Rate limiting configuration */\n  rateLimit?: {\n    /** Time window in milliseconds */\n    windowMs?: number;\n    /** Maximum requests per window */\n    max?: number;\n    /** Custom message for rate limit exceeded */\n    message?: string;\n    /** Skip successful requests in rate limit count */\n    skipSuccessfulRequests?: boolean;\n  };\n\n  /** Security configuration */\n  security?: {\n    /** Valid API keys for authentication */\n    apiKeys?: string[];\n    /** Whether to require API key authentication */\n    requireAuth?: boolean;\n    /** Custom authentication function */\n    customAuth?: (req: Request) => Promise<boolean>;\n    /** Trusted proxy configuration */\n    trustProxy?: boolean | number | string;\n  };\n\n  /** Monitoring and observability configuration */\n  monitoring?: {\n    /** Whether to enable performance metrics collection */\n    enableMetrics?: boolean;\n    /** How long to retain metrics in memory (milliseconds) */\n    metricsRetention?: number;\n    /** Custom metrics collector */\n    customMetrics?: (metrics: ToolMetrics) => void;\n  };\n\n  /** Development mode settings */\n  development?: {\n    /** Enable detailed error messages */\n    verboseErrors?: boolean;\n    /** Enable hot reload (if supported) */\n    hotReload?: boolean;\n    /** Enable request/response logging */\n    requestLogging?: boolean;\n  };\n\n  /** Timeout settings */\n  timeouts?: {\n    /** Request timeout in milliseconds */\n    request?: number;\n    /** Tool execution timeout in milliseconds */\n    execution?: number;\n    /** Server shutdown timeout in milliseconds */\n    shutdown?: number;\n  };\n}\n\n/**\n * Tool execution metrics and performance data\n */\nexport interface ToolMetrics {\n  /** Total number of executions */\n  totalExecutions: number;\n\n  /** Number of successful executions */\n  successfulExecutions: number;\n\n  /** Number of failed executions */\n  failedExecutions: number;\n\n  /** Average execution time in milliseconds */\n  averageExecutionTimeMs: number;\n\n  /** Minimum execution time in milliseconds */\n  minExecutionTimeMs: number;\n\n  /** Maximum execution time in milliseconds */\n  maxExecutionTimeMs: number;\n\n  /** Error rate percentage (0-100) */\n  errorRatePercent: number;\n\n  /** Requests per minute */\n  requestsPerMinute: number;\n\n  /** Current memory usage in bytes */\n  memoryUsageBytes: number;\n\n  /** CPU usage percentage (0-100) */\n  cpuUsagePercent: number;\n\n  /** Server uptime in seconds */\n  uptimeSeconds: number;\n\n  /** Timestamp of last execution */\n  lastExecutionAt?: Date;\n\n  /** Recent error codes and their counts */\n  recentErrors: Record<string, number>;\n\n  /** Rate limiting statistics */\n  rateLimiting?: {\n    /** Total requests blocked */\n    blockedRequests: number;\n    /** Current rate limit status */\n    currentWindowRequests: number;\n    /** Rate limit window reset time */\n    windowResetAt: Date;\n  };\n}\n\n/**\n * Tool execution statistics for a single request\n */\ninterface ExecutionStats {\n  executionId: string;\n  startTime: number;\n  endTime?: number;\n  durationMs?: number;\n  success: boolean;\n  errorCode?: string;\n  memoryUsageBytes?: number;\n  timestamp: Date;\n}\n\n/**\n * Current tool state\n */\nexport type ToolState =\n  | 'stopped'\n  | 'starting'\n  | 'running'\n  | 'stopping'\n  | 'error';\n\n/**\n * Events emitted by the Tool instance\n */\nexport interface ToolEvents {\n  /** Emitted when tool state changes */\n  stateChange: (oldState: ToolState, newState: ToolState) => void;\n\n  /** Emitted before tool execution */\n  beforeExecution: (context: ToolExecutionContext) => void;\n\n  /** Emitted after tool execution */\n  afterExecution: (\n    context: ToolExecutionContext,\n    result: ToolExecutionResult\n  ) => void;\n\n  /** Emitted when an error occurs */\n  error: (error: Error, context?: ToolExecutionContext) => void;\n\n  /** Emitted when server starts */\n  serverStarted: (port: number, host: string) => void;\n\n  /** Emitted when server stops */\n  serverStopped: () => void;\n\n  /** Emitted for rate limit events */\n  rateLimitExceeded: (ip: string, limit: number) => void;\n}\n\n/**\n * Core Tool class that manages the complete lifecycle of an AI Spine tool.\n * This class handles HTTP server setup, request processing, validation,\n * execution, monitoring, and security.\n *\n * @example\n * ```typescript\n * import { Tool, stringField, apiKeyField } from '@ai-spine/tools-core';\n *\n * const weatherTool = new Tool({\n *   metadata: {\n *     name: 'weather-tool',\n *     version: '1.0.0',\n *     description: 'Get weather information',\n *     capabilities: ['weather.current']\n *   },\n *   schema: {\n *     input: {\n *       city: stringField().required().minLength(2).build()\n *     },\n *     config: {\n *       apiKey: apiKeyField().required().envVar('WEATHER_API_KEY').build()\n *     }\n *   },\n *   execute: async (input, config, context) => {\n *     // Your tool logic here\n *     return {\n *       status: 'success',\n *       data: { temperature: 22, description: 'sunny' }\n *     };\n *   }\n * });\n *\n * // Start the tool server\n * await weatherTool.start({ port: 3000 });\n * ```\n */\nexport class Tool<TInput = ToolInput, TConfig = ToolConfig> {\n  private readonly definition: ToolDefinition<TInput, TConfig>;\n  private readonly validator: ZodSchemaValidator;\n\n  private app: Application;\n  private server: any;\n  private state: ToolState = 'stopped';\n  private config: ToolServerConfig = {};\n  private toolConfig: TConfig | null = null;\n\n  // Metrics and monitoring\n  private startTime: number = Date.now();\n  private executionHistory: ExecutionStats[] = [];\n  private metrics!: ToolMetrics; // Initialized in initializeMetrics()\n  private eventListeners: Partial<ToolEvents> = {};\n\n  // Security\n  private validApiKeys: Set<string> = new Set();\n\n  /**\n   * Creates a new Tool instance\n   *\n   * @param definition - Complete tool definition including metadata, schema, and execute function\n   *\n   * @example\n   * ```typescript\n   * const tool = new Tool({\n   *   metadata: { name: 'my-tool', version: '1.0.0', description: 'A sample tool' },\n   *   schema: { input: {}, config: {} },\n   *   execute: async (input, config, context) => ({ status: 'success', data: {} })\n   * });\n   * ```\n   */\n  constructor(definition: ToolDefinition<TInput, TConfig>) {\n    this.definition = definition;\n    this.validator = new ZodSchemaValidator();\n\n    this.app = express();\n    this.initializeMetrics();\n    this.setupExpressApp();\n\n    this.validateDefinition();\n  }\n\n  /**\n   * Validates the tool definition for completeness and correctness\n   * @private\n   */\n  private validateDefinition(): void {\n    if (!this.definition.metadata?.name) {\n      throw new ConfigurationError('Tool metadata must include a name');\n    }\n\n    if (!this.definition.metadata?.version) {\n      throw new ConfigurationError('Tool metadata must include a version');\n    }\n\n    if (!this.definition.metadata?.description) {\n      throw new ConfigurationError('Tool metadata must include a description');\n    }\n\n    if (!this.definition.schema) {\n      throw new ConfigurationError('Tool must include a schema definition');\n    }\n\n    if (typeof this.definition.execute !== 'function') {\n      throw new ConfigurationError('Tool must include an execute function');\n    }\n  }\n\n  /**\n   * Initializes metrics tracking\n   * @private\n   */\n  private initializeMetrics(): void {\n    this.metrics = {\n      totalExecutions: 0,\n      successfulExecutions: 0,\n      failedExecutions: 0,\n      averageExecutionTimeMs: 0,\n      minExecutionTimeMs: Infinity,\n      maxExecutionTimeMs: 0,\n      errorRatePercent: 0,\n      requestsPerMinute: 0,\n      memoryUsageBytes: 0,\n      cpuUsagePercent: 0,\n      uptimeSeconds: 0,\n      recentErrors: {},\n    };\n  }\n\n  /**\n   * Sets up the Express.js application with middleware\n   * @private\n   */\n  private setupExpressApp(): void {\n    // Security middleware\n    this.app.use(\n      helmet({\n        contentSecurityPolicy: {\n          directives: {\n            defaultSrc: [\"'self'\"],\n            styleSrc: [\"'self'\", \"'unsafe-inline'\"],\n            scriptSrc: [\"'self'\"],\n            imgSrc: [\"'self'\", 'data:', 'https:'],\n          },\n        },\n      })\n    );\n\n    // Request parsing middleware\n    this.app.use(express.json({ limit: '10mb' }));\n    this.app.use(express.urlencoded({ extended: true, limit: '10mb' }));\n\n    // JSON parsing error handling middleware\n    this.app.use(\n      (error: any, _req: Request, res: Response, next: NextFunction) => {\n        if (error instanceof SyntaxError && 'body' in error) {\n          return this.sendStandardError(res, {\n            code: 'INVALID_JSON',\n            message: 'Invalid JSON in request body',\n            type: 'client_error',\n            statusCode: 400,\n            details: {\n              error_message: 'Request body contains malformed JSON',\n              hint: 'Please ensure your JSON is properly formatted',\n            },\n          });\n        }\n        next(error);\n      }\n    );\n\n    // Request ID middleware\n    this.app.use((req, res, next) => {\n      req.headers['x-request-id'] = req.headers['x-request-id'] || randomUUID();\n      res.setHeader('X-Request-ID', req.headers['x-request-id']);\n      next();\n    });\n\n    // Request logging middleware (development)\n    this.app.use((req, _res, next) => {\n      if (this.config.development?.requestLogging) {\n        console.log(\n          `[${new Date().toISOString()}] ${req.method} ${req.path} - ${req.ip}`\n        );\n      }\n      next();\n    });\n  }\n\n  /**\n   * Applies CORS configuration\n   * @private\n   */\n  private applyCorsConfiguration(): void {\n    if (this.config.cors) {\n      this.app.use(\n        cors({\n          origin: this.config.cors.origin || false,\n          credentials: this.config.cors.credentials || false,\n          allowedHeaders: this.config.cors.allowedHeaders || [\n            'Content-Type',\n            'Authorization',\n            'X-API-Key',\n          ],\n          methods: this.config.cors.methods || ['GET', 'POST', 'OPTIONS'],\n        })\n      );\n    }\n  }\n\n  /**\n   * Applies rate limiting configuration\n   * @private\n   */\n  private applyRateLimiting(): void {\n    if (this.config.rateLimit) {\n      const limiter = rateLimit({\n        windowMs: this.config.rateLimit.windowMs || 15 * 60 * 1000, // 15 minutes\n        max: this.config.rateLimit.max || 100,\n        message:\n          this.config.rateLimit.message ||\n          'Too many requests, please try again later',\n        skipSuccessfulRequests:\n          this.config.rateLimit.skipSuccessfulRequests || false,\n        handler: (req: Request, res: Response) => {\n          this.emit(\n            'rateLimitExceeded',\n            req.ip || 'unknown',\n            this.config.rateLimit!.max!\n          );\n          res.status(429).json({\n            error: {\n              code: 'RATE_LIMIT_EXCEEDED',\n              message:\n                this.config.rateLimit!.message ||\n                'Too many requests, please try again later',\n              type: 'client_error',\n              retryAfterMs: this.config.rateLimit!.windowMs,\n            },\n          });\n        },\n      });\n\n      this.app.use(limiter);\n    }\n  }\n\n  /**\n   * Sets up authentication middleware\n   * @private\n   */\n  private setupAuthentication(): void {\n    if (!this.config.security?.requireAuth) {\n      return;\n    }\n\n    this.app.use(async (req: Request, res: Response, next: NextFunction) => {\n      try {\n        // Skip authentication for health, monitoring, and documentation endpoints\n        if (\n          req.path === '/health' ||\n          req.path === '/metrics' ||\n          req.path === '/' ||\n          req.path === '/schema'\n        ) {\n          return next();\n        }\n\n        let authenticated = false;\n\n        // Check for API key authentication\n        const apiKey =\n          req.headers['x-api-key'] ||\n          req.headers['authorization']?.replace('Bearer ', '');\n\n        if (apiKey && this.validApiKeys.has(apiKey as string)) {\n          authenticated = true;\n          // Add API key hash to request for logging\n          req.headers['x-api-key-hash'] = createHash('sha256')\n            .update(apiKey as string)\n            .digest('hex')\n            .substring(0, 8);\n        }\n\n        // Check custom authentication\n        if (!authenticated && this.config.security?.customAuth) {\n          authenticated = await this.config.security.customAuth(req);\n        }\n\n        if (!authenticated) {\n          return res.status(401).json({\n            error: {\n              code: 'AUTHENTICATION_REQUIRED',\n              message: 'Valid API key required',\n              type: 'client_error',\n            },\n          });\n        }\n\n        return next();\n      } catch (error) {\n        return res.status(500).json({\n          error: {\n            code: 'AUTHENTICATION_ERROR',\n            message: 'Authentication system error',\n            type: 'server_error',\n          },\n        });\n      }\n    });\n  }\n\n  /**\n   * Sets up all HTTP endpoints with comprehensive middleware\n   * @private\n   */\n  private setupRoutes(): void {\n    // Request logging middleware\n    this.app.use((req: Request, _res: Response, next: NextFunction) => {\n      if (this.config.development?.requestLogging) {\n        const requestId = randomUUID();\n        req.headers['x-request-id'] = requestId;\n        console.log(\n          `[${new Date().toISOString()}] ${req.method} ${req.path} - Request ID: ${requestId}`\n        );\n      }\n      next();\n    });\n\n    // Request/Response tracking middleware\n    this.app.use((req: Request, res: Response, next: NextFunction) => {\n      const startTime = performance.now();\n      const toolVersion = this.definition.metadata.version;\n      const requestLogging = this.config.development?.requestLogging;\n\n      // Add request metadata\n      res.locals.requestStart = startTime;\n      res.locals.requestId = req.headers['x-request-id'] || randomUUID();\n\n      // Track response\n      const originalSend = res.send;\n      res.send = function (body: any) {\n        const endTime = performance.now();\n        const duration = endTime - startTime;\n\n        // Add response headers\n        res.set({\n          'X-Request-ID': res.locals.requestId,\n          'X-Response-Time': `${Math.round(duration)}ms`,\n          'X-Tool-Version': toolVersion,\n        });\n\n        if (requestLogging) {\n          console.log(\n            `[${new Date().toISOString()}] ${req.method} ${req.path} - ${res.statusCode} - ${Math.round(duration)}ms`\n          );\n        }\n\n        return originalSend.call(this, body);\n      };\n\n      next();\n    });\n\n    // Content type validation middleware\n    this.app.use((req: Request, res: Response, next: NextFunction) => {\n      if (req.method === 'POST' && req.path === '/api/execute') {\n        if (!req.is('application/json')) {\n          return this.sendStandardError(\n            res,\n            {\n              code: 'INVALID_CONTENT_TYPE',\n              message: 'Content-Type must be application/json',\n              type: 'validation_error',\n              statusCode: 415,\n            },\n            res.locals.requestId\n          );\n        }\n      }\n      next();\n    });\n\n    // POST /api/execute - Main tool execution endpoint\n    this.app.post(\n      '/api/execute',\n      this.asyncErrorHandler(async (req: Request, res: Response) => {\n        await this.handleExecute(req, res);\n      })\n    );\n\n    // GET /health - Health check endpoint\n    this.app.get(\n      '/health',\n      this.asyncErrorHandler(async (req: Request, res: Response) => {\n        await this.handleHealth(req, res);\n      })\n    );\n\n    // GET /schema - Schema documentation endpoint\n    this.app.get(\n      '/schema',\n      this.asyncErrorHandler(async (req: Request, res: Response) => {\n        await this.handleSchema(req, res);\n      })\n    );\n\n    // GET /metrics - Performance metrics endpoint\n    this.app.get(\n      '/metrics',\n      this.asyncErrorHandler(async (req: Request, res: Response) => {\n        await this.handleMetrics(req, res);\n      })\n    );\n\n    // GET / - Root endpoint with comprehensive tool information\n    this.app.get(\n      '/',\n      this.asyncErrorHandler(async (_req: Request, res: Response) => {\n        this.updateMetrics(); // Ensure metrics are current\n\n        const toolInfo = {\n          name: this.definition.metadata.name,\n          version: this.definition.metadata.version,\n          description: this.definition.metadata.description,\n          capabilities: this.definition.metadata.capabilities || [],\n          author: this.definition.metadata.author,\n          tags: this.definition.metadata.tags || [],\n          status: this.state,\n          uptime_seconds: this.metrics.uptimeSeconds,\n          health: {\n            status:\n              this.metrics.errorRatePercent > 50\n                ? 'unhealthy'\n                : this.metrics.errorRatePercent > 10\n                  ? 'degraded'\n                  : 'healthy',\n            error_rate_percent: this.metrics.errorRatePercent,\n            avg_response_time_ms: this.metrics.averageExecutionTimeMs,\n          },\n          endpoints: {\n            execute: {\n              method: 'POST',\n              path: '/api/execute',\n              description: 'Execute the tool with input data',\n              authentication_required:\n                this.config.security?.requireAuth || false,\n            },\n            health: {\n              method: 'GET',\n              path: '/health',\n              description: 'Get tool health status and metrics',\n            },\n            schema: {\n              method: 'GET',\n              path: '/schema',\n              description: 'Get OpenAPI schema documentation',\n            },\n            metrics: {\n              method: 'GET',\n              path: '/metrics',\n              description: 'Get detailed performance metrics',\n            },\n            info: {\n              method: 'GET',\n              path: '/',\n              description: 'Get basic tool information (this endpoint)',\n            },\n          },\n          configuration: {\n            rate_limiting: this.config.rateLimit\n              ? {\n                  window_ms: this.config.rateLimit.windowMs,\n                  max_requests: this.config.rateLimit.max,\n                }\n              : null,\n            cors_enabled: !!this.config.cors,\n            authentication_enabled: this.config.security?.requireAuth || false,\n            monitoring_enabled: this.config.monitoring?.enableMetrics || false,\n          },\n          runtime_info: {\n            node_version: process.version,\n            platform: process.platform,\n            pid: process.pid,\n            memory_usage_mb: Math.round(\n              this.metrics.memoryUsageBytes / 1024 / 1024\n            ),\n          },\n          timestamp: new Date().toISOString(),\n        };\n\n        res.json(toolInfo);\n      })\n    );\n\n    // 404 handler for undefined routes\n    this.app.use((req: Request, res: Response) => {\n      this.sendStandardError(\n        res,\n        {\n          code: 'ENDPOINT_NOT_FOUND',\n          message: `Endpoint ${req.method} ${req.path} not found`,\n          type: 'client_error',\n          statusCode: 404,\n          details: {\n            available_endpoints: [\n              'POST /api/execute',\n              'GET /health',\n              'GET /schema',\n              'GET /metrics',\n              'GET /',\n            ],\n            method_used: req.method,\n            path_requested: req.path,\n          },\n        },\n        res.locals.requestId\n      );\n    });\n\n    // Global error handler\n    this.app.use(\n      (error: Error, _req: Request, res: Response, _next: NextFunction) => {\n        this.emit('error', error);\n\n        this.sendStandardError(\n          res,\n          {\n            code: 'INTERNAL_SERVER_ERROR',\n            message: 'An unexpected error occurred',\n            type: 'server_error',\n            statusCode: 500,\n            details: this.config.development?.verboseErrors\n              ? {\n                  error_message: error.message,\n                  stack: error.stack,\n                }\n              : undefined,\n          },\n          res.locals.requestId\n        );\n      }\n    );\n  }\n\n  /**\n   * Async error handler wrapper for route handlers\n   * @private\n   */\n  private asyncErrorHandler(\n    fn: (req: Request, res: Response, next?: NextFunction) => Promise<void>\n  ) {\n    return (req: Request, res: Response, next: NextFunction) => {\n      Promise.resolve(fn(req, res, next)).catch(next);\n    };\n  }\n\n  /**\n   * Sends standardized error responses across all endpoints\n   *\n   * @param res Express response object\n   * @param error Error details\n   * @param requestId Optional request ID for tracking\n   * @private\n   */\n  private sendStandardError(\n    res: Response,\n    error: {\n      code: string;\n      message: string;\n      type: string;\n      statusCode: number;\n      details?: any;\n      retryable?: boolean;\n      retryAfterMs?: number;\n    },\n    requestId?: string\n  ): void {\n    const errorResponse = {\n      request_id: requestId || res.locals.requestId || randomUUID(),\n      status: 'error',\n      error: {\n        code: error.code,\n        message: error.message,\n        type: error.type,\n        retryable: error.retryable || false,\n        retry_after_ms: error.retryAfterMs,\n        details: error.details,\n      },\n      timestamp: new Date().toISOString(),\n      tool_info: {\n        name: this.definition.metadata.name,\n        version: this.definition.metadata.version,\n      },\n    };\n\n    // Add standard error headers\n    res.set({\n      'Content-Type': 'application/json',\n      'Cache-Control': 'no-cache, no-store, must-revalidate',\n      'X-Error-Code': error.code,\n      'X-Error-Type': error.type,\n    });\n\n    res.status(error.statusCode).json(errorResponse);\n  }\n\n  /**\n   * Handles the /api/execute endpoint\n   * @private\n   */\n  private async handleExecute(req: Request, res: Response): Promise<void> {\n    const executionId = randomUUID();\n    const startTime = performance.now();\n\n    try {\n      // Create execution context\n      const context: ToolExecutionContext = {\n        executionId,\n        toolId: this.definition.metadata.name,\n        toolVersion: this.definition.metadata.version,\n        timestamp: new Date(),\n        requestId: req.headers['x-request-id'] as string,\n        environment: process.env.NODE_ENV || 'development',\n        performance: {\n          startTime,\n          timeoutMs: this.config.timeouts?.execution || 30000,\n        },\n        security: {\n          apiKeyHash: req.headers['x-api-key-hash'] as string,\n          sourceIp: req.ip,\n          userAgent: req.headers['user-agent'],\n        },\n      };\n\n      this.emit('beforeExecution', context);\n\n      // Validate request format\n      if (!req.body || typeof req.body !== 'object') {\n        throw new ValidationError('Request body must be a JSON object');\n      }\n\n      const { input_data = {}, config = {} } =\n        req.body as AISpineExecuteRequest;\n\n      // Validate input data\n      const inputValidation = await this.validator.validateInput(\n        input_data,\n        this.definition.schema.input\n      );\n\n      if (!inputValidation.success) {\n        throw new ValidationError(\n          'Input validation failed',\n          inputValidation.errors?.[0]?.path.join('.'),\n          input_data\n        );\n      }\n\n      // Use configured tool config if available, otherwise validate provided config\n      let validatedConfig: TConfig;\n      if (this.toolConfig) {\n        validatedConfig = this.toolConfig;\n      } else {\n        const configValidation = await this.validator.validateConfig(\n          config,\n          this.definition.schema.config\n        );\n\n        if (!configValidation.success) {\n          throw new ConfigurationError(\n            'Configuration validation failed',\n            configValidation.errors?.map(e => e.path.join('.'))\n          );\n        }\n\n        validatedConfig = configValidation.data as TConfig;\n      }\n\n      // Execute the tool\n      const result = await this.executeWithTimeout(\n        inputValidation.data as TInput,\n        validatedConfig,\n        context\n      );\n\n      const endTime = performance.now();\n      const executionTimeMs = endTime - startTime;\n\n      // Record execution statistics\n      this.recordExecution({\n        executionId,\n        startTime,\n        endTime,\n        durationMs: executionTimeMs,\n        success: result.status === 'success',\n        errorCode: result.error?.code,\n        timestamp: new Date(),\n      });\n\n      // Update timing in result\n      if (result.timing) {\n        result.timing.executionTimeMs = executionTimeMs;\n        result.timing.completedAt = new Date().toISOString();\n      }\n\n      this.emit('afterExecution', context, result);\n\n      // Send response\n      const response: AISpineExecuteResponse = {\n        execution_id: executionId,\n        status: result.status === 'success' ? 'success' : 'error',\n        output_data: result.data,\n        error_code: result.error?.code,\n        error_message: result.error?.message,\n        error_details: result.error?.details,\n        execution_time_ms: executionTimeMs,\n        timestamp: new Date().toISOString(),\n      };\n\n      const statusCode =\n        result.status === 'success'\n          ? 200\n          : result.error?.type === 'validation_error'\n            ? 400\n            : result.error?.type === 'configuration_error'\n              ? 400\n              : result.error?.type === 'timeout_error'\n                ? 408\n                : 500;\n\n      res.status(statusCode).json(response);\n    } catch (error) {\n      const endTime = performance.now();\n      const executionTimeMs = endTime - startTime;\n\n      this.emit(\n        'error',\n        error as Error,\n        { executionId } as ToolExecutionContext\n      );\n\n      // Record failed execution\n      this.recordExecution({\n        executionId,\n        startTime,\n        endTime,\n        durationMs: executionTimeMs,\n        success: false,\n        errorCode: (error as ToolError).code || 'UNKNOWN_ERROR',\n        timestamp: new Date(),\n      });\n\n      let statusCode = 500;\n      let errorResponse: any;\n\n      if (error instanceof ValidationError) {\n        statusCode = 400;\n        errorResponse = {\n          execution_id: executionId,\n          status: 'error',\n          error_code: error.code,\n          error_message: error.message,\n          error_details: error.details,\n          execution_time_ms: executionTimeMs,\n          timestamp: new Date().toISOString(),\n        };\n      } else if (error instanceof ConfigurationError) {\n        statusCode = 400;\n        errorResponse = {\n          execution_id: executionId,\n          status: 'error',\n          error_code: error.code,\n          error_message: error.message,\n          error_details: error.details,\n          execution_time_ms: executionTimeMs,\n          timestamp: new Date().toISOString(),\n        };\n      } else {\n        errorResponse = {\n          execution_id: executionId,\n          status: 'error',\n          error_code: 'INTERNAL_ERROR',\n          error_message: 'An internal error occurred',\n          error_details: this.config.development?.verboseErrors\n            ? (error as Error).message\n            : undefined,\n          execution_time_ms: executionTimeMs,\n          timestamp: new Date().toISOString(),\n        };\n      }\n\n      res.status(statusCode).json(errorResponse);\n    }\n  }\n\n  /**\n   * Executes the tool with timeout protection\n   * @private\n   */\n  private async executeWithTimeout(\n    input: TInput,\n    config: TConfig,\n    context: ToolExecutionContext\n  ): Promise<ToolExecutionResult> {\n    const timeoutMs = context.performance?.timeoutMs || 30000;\n\n    return new Promise((resolve, reject) => {\n      const timeoutId = setTimeout(() => {\n        reject(\n          new ExecutionError(`Tool execution timed out after ${timeoutMs}ms`)\n        );\n      }, timeoutMs);\n\n      (async () => {\n        try {\n          const result = await this.definition.execute(input, config, context);\n          clearTimeout(timeoutId);\n          resolve(result);\n        } catch (error) {\n          clearTimeout(timeoutId);\n          reject(error);\n        }\n      })();\n    });\n  }\n\n  /**\n   * Handles the /health endpoint with comprehensive health monitoring\n   *\n   * This endpoint provides detailed health information including:\n   * - Overall health status (healthy/degraded/unhealthy)\n   * - Performance metrics and thresholds\n   * - Custom health checks\n   * - Dependency health verification\n   * - System resource usage\n   *\n   * @private\n   */\n  private async handleHealth(_req: Request, res: Response): Promise<void> {\n    const healthCheckStart = performance.now();\n\n    try {\n      let healthStatus: 'healthy' | 'unhealthy' | 'degraded' = 'healthy';\n      let _details: Record<string, any> = {};\n      const checks: Record<string, any> = {};\n\n      // Update metrics before health check\n      this.updateMetrics();\n\n      // 1. Performance Health Checks\n      checks.performance = {\n        status: 'healthy',\n        metrics: {\n          avg_response_time_ms: this.metrics.averageExecutionTimeMs,\n          error_rate_percent: this.metrics.errorRatePercent,\n          requests_per_minute: this.metrics.requestsPerMinute,\n          memory_usage_mb: Math.round(\n            this.metrics.memoryUsageBytes / 1024 / 1024\n          ),\n          uptime_seconds: this.metrics.uptimeSeconds,\n        },\n      };\n\n      // Check performance thresholds\n      if (this.metrics.averageExecutionTimeMs > 5000) {\n        checks.performance.status = 'degraded';\n        checks.performance.issues = checks.performance.issues || [];\n        checks.performance.issues.push('High average response time');\n        healthStatus = 'degraded';\n      }\n\n      if (this.metrics.errorRatePercent > 50) {\n        checks.performance.status = 'unhealthy';\n        checks.performance.issues = checks.performance.issues || [];\n        checks.performance.issues.push('High error rate');\n        healthStatus = 'unhealthy';\n      } else if (this.metrics.errorRatePercent > 10) {\n        checks.performance.status = 'degraded';\n        checks.performance.issues = checks.performance.issues || [];\n        checks.performance.issues.push('Elevated error rate');\n        if (healthStatus === 'healthy') healthStatus = 'degraded';\n      }\n\n      // Memory usage check\n      const memoryUsageMB = this.metrics.memoryUsageBytes / 1024 / 1024;\n      if (memoryUsageMB > 500) {\n        checks.performance.status = 'degraded';\n        checks.performance.issues = checks.performance.issues || [];\n        checks.performance.issues.push('High memory usage');\n        if (healthStatus === 'healthy') healthStatus = 'degraded';\n      }\n\n      // 2. Tool State Health Check\n      checks.tool_state = {\n        status: this.state === 'running' ? 'healthy' : 'unhealthy',\n        current_state: this.state,\n        configuration_valid: !!this.toolConfig,\n      };\n\n      if (this.state !== 'running') {\n        healthStatus = 'unhealthy';\n      }\n\n      // 3. Recent Errors Analysis\n      if (Object.keys(this.metrics.recentErrors).length > 0) {\n        checks.recent_errors = {\n          status: 'warning',\n          error_types: this.metrics.recentErrors,\n          total_recent_errors: Object.values(this.metrics.recentErrors).reduce(\n            (a, b) => a + b,\n            0\n          ),\n        };\n      }\n\n      // 4. Custom Health Check (if provided)\n      if (this.definition.healthCheck) {\n        try {\n          const customHealthStart = performance.now();\n          const customHealth = await this.definition.healthCheck();\n          const customHealthDuration = performance.now() - customHealthStart;\n\n          checks.custom = {\n            status: customHealth.status,\n            details: customHealth.details || {},\n            check_duration_ms: Math.round(customHealthDuration),\n          };\n\n          // Custom health check overrides if more severe\n          if (customHealth.status === 'unhealthy') {\n            healthStatus = 'unhealthy';\n          } else if (\n            customHealth.status === 'degraded' &&\n            healthStatus === 'healthy'\n          ) {\n            healthStatus = 'degraded';\n          }\n\n          _details = { ..._details, ...customHealth.details };\n        } catch (error) {\n          checks.custom = {\n            status: 'unhealthy',\n            error: 'Custom health check failed',\n            error_message: (error as Error).message,\n          };\n          healthStatus = 'unhealthy';\n        }\n      }\n\n      // 5. System Information\n      const systemInfo = {\n        node_version: process.version,\n        platform: process.platform,\n        architecture: process.arch,\n        pid: process.pid,\n      };\n\n      const healthCheckDuration = performance.now() - healthCheckStart;\n\n      // Build comprehensive health response\n      const response: AISpineHealthResponse & {\n        checks: Record<string, any>;\n        system_info: Record<string, any>;\n        health_check_duration_ms: number;\n        timestamp?: string;\n        detailed_metrics?: any;\n      } = {\n        status: healthStatus,\n        version: this.definition.metadata.version,\n        tool_metadata: {\n          name: this.definition.metadata.name,\n          description: this.definition.metadata.description,\n          version: this.definition.metadata.version,\n          capabilities: this.definition.metadata.capabilities,\n          author: this.definition.metadata.author,\n          tags: this.definition.metadata.tags,\n        },\n        capabilities: this.definition.metadata.capabilities,\n        uptime_seconds: this.metrics.uptimeSeconds,\n        last_execution: this.metrics.lastExecutionAt?.toISOString(),\n        error_rate_percent: this.metrics.errorRatePercent,\n        avg_response_time_ms: this.metrics.averageExecutionTimeMs,\n        checks,\n        system_info: systemInfo,\n        health_check_duration_ms: Math.round(healthCheckDuration),\n        timestamp: new Date().toISOString(),\n      };\n\n      // Add detailed metrics for degraded/unhealthy status\n      if (healthStatus !== 'healthy') {\n        response.detailed_metrics = {\n          total_executions: this.metrics.totalExecutions,\n          successful_executions: this.metrics.successfulExecutions,\n          failed_executions: this.metrics.failedExecutions,\n          min_response_time_ms: this.metrics.minExecutionTimeMs,\n          max_response_time_ms: this.metrics.maxExecutionTimeMs,\n          memory_usage_bytes: this.metrics.memoryUsageBytes,\n          recent_errors: this.metrics.recentErrors,\n        };\n      }\n\n      // Set appropriate HTTP status code\n      const statusCode =\n        healthStatus === 'healthy'\n          ? 200\n          : healthStatus === 'degraded'\n            ? 200\n            : 503;\n\n      // Add custom headers\n      res.set({\n        'X-Health-Status': healthStatus,\n        'X-Tool-Version': this.definition.metadata.version,\n        'X-Uptime-Seconds': this.metrics.uptimeSeconds.toString(),\n        'Cache-Control': 'no-cache, no-store, must-revalidate',\n      });\n\n      res.status(statusCode).json(response);\n    } catch (error) {\n      const healthCheckDuration = performance.now() - healthCheckStart;\n\n      // Emergency health response for critical failures\n      const emergencyResponse = {\n        status: 'unhealthy',\n        version: this.definition.metadata.version,\n        tool_metadata: {\n          name: this.definition.metadata.name,\n          version: this.definition.metadata.version,\n        },\n        capabilities: this.definition.metadata.capabilities,\n        uptime_seconds: Math.floor((Date.now() - this.startTime) / 1000),\n        error: 'Health check system failure',\n        error_message: (error as Error).message,\n        health_check_duration_ms: Math.round(healthCheckDuration),\n        timestamp: new Date().toISOString(),\n        checks: {\n          health_system: {\n            status: 'unhealthy',\n            error: 'Health check endpoint failure',\n          },\n        },\n      };\n\n      res.set({\n        'X-Health-Status': 'unhealthy',\n        'X-Tool-Version': this.definition.metadata.version,\n        'Cache-Control': 'no-cache, no-store, must-revalidate',\n      });\n\n      res.status(503).json(emergencyResponse);\n    }\n  }\n\n  /**\n   * Handles the /schema endpoint with comprehensive API documentation\n   *\n   * This endpoint provides complete OpenAPI 3.0.3 specification including:\n   * - Tool metadata and capabilities\n   * - Input/config schema definitions\n   * - Endpoint documentation with examples\n   * - Response schemas and error codes\n   * - Integration guides and best practices\n   *\n   * @private\n   */\n  private async handleSchema(_req: Request, res: Response): Promise<void> {\n    const schemaGenerationStart = performance.now();\n\n    try {\n      // Generate base OpenAPI documentation\n      // TODO: Implement proper documentation generation\n      const baseDocumentation = {\n        openapi: '3.0.3',\n        info: {\n          title: this.definition.metadata.name,\n          version: this.definition.metadata.version,\n          description: this.definition.metadata.description,\n        },\n        paths: {},\n        components: {\n          schemas: {},\n        },\n      };\n      // const baseDocumentation = this.documentationGenerator.generateToolDocumentation(\n      //   this.definition.schema,\n      //   {\n      //     name: this.definition.metadata.name,\n      //     description: this.definition.metadata.description,\n      //     version: this.definition.metadata.version\n      //   }\n      // );\n\n      // Enhance with additional tool information\n      const enhancedDocumentation = {\n        ...baseDocumentation,\n        info: {\n          ...baseDocumentation.info,\n          title: `${this.definition.metadata.name} API`,\n          description: `${this.definition.metadata.description}\\n\\n**Capabilities:** ${this.definition.metadata.capabilities?.join(', ') || 'Not specified'}\\n\\n**Author:** ${this.definition.metadata.author || 'Not specified'}`,\n          version: this.definition.metadata.version,\n          contact: this.definition.metadata.author\n            ? {\n                name: this.definition.metadata.author,\n              }\n            : undefined,\n          license: this.definition.metadata.license\n            ? {\n                name: this.definition.metadata.license,\n              }\n            : undefined,\n          'x-tool-metadata': this.definition.metadata,\n          'x-runtime-info': {\n            server_version: process.version,\n            uptime_seconds: this.metrics.uptimeSeconds,\n            last_updated: new Date().toISOString(),\n          },\n        },\n        servers: [\n          {\n            url: `http://localhost:${this.config.port || 3000}`,\n            description: 'Local development server',\n          },\n        ],\n        paths: {\n          ...baseDocumentation.paths,\n\n          // Enhanced /api/execute endpoint documentation\n          '/api/execute': {\n            post: {\n              // ...baseDocumentation.paths['/api/execute']?.post, // Commented out - paths is empty\n              summary: 'Execute the AI Spine tool',\n              description: `Execute the ${this.definition.metadata.name} tool with provided input data. This endpoint validates the input against the tool's schema, executes the tool logic, and returns the result.`,\n              operationId: 'executeTool',\n              tags: ['Tool Execution'],\n              security: this.config.security?.requireAuth\n                ? [{ apiKey: [] }]\n                : [],\n              requestBody: {\n                required: true,\n                content: {\n                  'application/json': {\n                    schema: this.generateRequestBodySchema(),\n                  },\n                },\n              },\n              responses: {\n                '200': {\n                  description: 'Tool executed successfully',\n                  headers: {\n                    'X-Execution-ID': {\n                      description: 'Unique execution identifier',\n                      schema: { type: 'string' },\n                    },\n                    'X-Execution-Time-Ms': {\n                      description: 'Execution time in milliseconds',\n                      schema: { type: 'number' },\n                    },\n                  },\n                  content: {\n                    'application/json': {\n                      schema: {\n                        type: 'object',\n                        properties: {\n                          execution_id: {\n                            type: 'string',\n                            description: 'Unique identifier for this execution',\n                            example: 'exec_1234567890abcdef',\n                          },\n                          status: {\n                            type: 'string',\n                            enum: ['success'],\n                            description: 'Execution status',\n                          },\n                          output_data: {\n                            type: 'object',\n                            description: 'Tool execution results',\n                          },\n                          execution_time_ms: {\n                            type: 'number',\n                            description: 'Total execution time in milliseconds',\n                            example: 1250,\n                          },\n                          timestamp: {\n                            type: 'string',\n                            format: 'date-time',\n                            description: 'Response timestamp',\n                          },\n                        },\n                        required: [\n                          'execution_id',\n                          'status',\n                          'execution_time_ms',\n                          'timestamp',\n                        ],\n                      },\n                    },\n                  },\n                },\n                '400': {\n                  description: 'Invalid input or configuration',\n                  content: {\n                    'application/json': {\n                      schema: {\n                        type: 'object',\n                        properties: {\n                          execution_id: { type: 'string' },\n                          status: { type: 'string', enum: ['error'] },\n                          error_code: {\n                            type: 'string',\n                            enum: ['VALIDATION_ERROR', 'CONFIGURATION_ERROR'],\n                            description: 'Error classification code',\n                          },\n                          error_message: {\n                            type: 'string',\n                            description: 'Human-readable error description',\n                          },\n                          error_details: {\n                            type: 'array',\n                            items: { type: 'string' },\n                            description: 'Detailed validation error messages',\n                          },\n                          execution_time_ms: { type: 'number' },\n                          timestamp: { type: 'string', format: 'date-time' },\n                        },\n                      },\n                    },\n                  },\n                },\n                '401': {\n                  description: 'Authentication required',\n                  content: {\n                    'application/json': {\n                      schema: {\n                        type: 'object',\n                        properties: {\n                          error: {\n                            type: 'object',\n                            properties: {\n                              code: {\n                                type: 'string',\n                                example: 'AUTHENTICATION_REQUIRED',\n                              },\n                              message: {\n                                type: 'string',\n                                example: 'API key is required',\n                              },\n                            },\n                          },\n                        },\n                      },\n                    },\n                  },\n                },\n                '408': {\n                  description: 'Request timeout',\n                  content: {\n                    'application/json': {\n                      schema: {\n                        type: 'object',\n                        properties: {\n                          execution_id: { type: 'string' },\n                          status: { type: 'string', enum: ['error'] },\n                          error_code: {\n                            type: 'string',\n                            example: 'TIMEOUT_ERROR',\n                          },\n                          error_message: { type: 'string' },\n                          execution_time_ms: { type: 'number' },\n                          timestamp: { type: 'string', format: 'date-time' },\n                        },\n                      },\n                    },\n                  },\n                },\n                '429': {\n                  description: 'Rate limit exceeded',\n                  content: {\n                    'application/json': {\n                      schema: {\n                        type: 'object',\n                        properties: {\n                          error: {\n                            type: 'object',\n                            properties: {\n                              code: {\n                                type: 'string',\n                                example: 'RATE_LIMIT_EXCEEDED',\n                              },\n                              message: { type: 'string' },\n                              retry_after_ms: { type: 'number' },\n                            },\n                          },\n                        },\n                      },\n                    },\n                  },\n                },\n                '500': {\n                  description: 'Internal server error',\n                  content: {\n                    'application/json': {\n                      schema: {\n                        type: 'object',\n                        properties: {\n                          execution_id: { type: 'string' },\n                          status: { type: 'string', enum: ['error'] },\n                          error_code: {\n                            type: 'string',\n                            example: 'INTERNAL_ERROR',\n                          },\n                          error_message: { type: 'string' },\n                          execution_time_ms: { type: 'number' },\n                          timestamp: { type: 'string', format: 'date-time' },\n                        },\n                      },\n                    },\n                  },\n                },\n              },\n            },\n          },\n\n          // Health endpoint documentation\n          '/health': {\n            get: {\n              summary: 'Health check endpoint',\n              description:\n                'Get comprehensive health status and performance metrics for the tool',\n              operationId: 'getHealth',\n              tags: ['Health & Monitoring'],\n              responses: {\n                '200': {\n                  description: 'Tool is healthy or degraded',\n                  content: {\n                    'application/json': {\n                      schema: {\n                        type: 'object',\n                        properties: {\n                          status: {\n                            type: 'string',\n                            enum: ['healthy', 'degraded'],\n                            description: 'Overall health status',\n                          },\n                          version: { type: 'string' },\n                          tool_metadata: { type: 'object' },\n                          capabilities: {\n                            type: 'array',\n                            items: { type: 'string' },\n                          },\n                          uptime_seconds: { type: 'number' },\n                          error_rate_percent: { type: 'number' },\n                          avg_response_time_ms: { type: 'number' },\n                          checks: { type: 'object' },\n                          system_info: { type: 'object' },\n                          health_check_duration_ms: { type: 'number' },\n                          timestamp: { type: 'string', format: 'date-time' },\n                        },\n                      },\n                    },\n                  },\n                },\n                '503': {\n                  description: 'Tool is unhealthy',\n                  content: {\n                    'application/json': {\n                      schema: {\n                        type: 'object',\n                        properties: {\n                          status: { type: 'string', enum: ['unhealthy'] },\n                          error: { type: 'string' },\n                          version: { type: 'string' },\n                          uptime_seconds: { type: 'number' },\n                        },\n                      },\n                    },\n                  },\n                },\n              },\n            },\n          },\n\n          // Metrics endpoint documentation\n          '/metrics': {\n            get: {\n              summary: 'Performance metrics',\n              description: 'Get detailed performance and usage metrics',\n              operationId: 'getMetrics',\n              tags: ['Health & Monitoring'],\n              responses: {\n                '200': {\n                  description: 'Metrics retrieved successfully',\n                  content: {\n                    'application/json': {\n                      schema: {\n                        type: 'object',\n                        properties: {\n                          totalExecutions: { type: 'number' },\n                          successfulExecutions: { type: 'number' },\n                          failedExecutions: { type: 'number' },\n                          averageExecutionTimeMs: { type: 'number' },\n                          minExecutionTimeMs: { type: 'number' },\n                          maxExecutionTimeMs: { type: 'number' },\n                          errorRatePercent: { type: 'number' },\n                          requestsPerMinute: { type: 'number' },\n                          memoryUsageBytes: { type: 'number' },\n                          uptimeSeconds: { type: 'number' },\n                          recentErrors: { type: 'object' },\n                          lastExecutionAt: {\n                            type: 'string',\n                            format: 'date-time',\n                          },\n                        },\n                      },\n                    },\n                  },\n                },\n              },\n            },\n          },\n\n          // Root endpoint documentation\n          '/': {\n            get: {\n              summary: 'Tool information',\n              description: 'Get basic tool information and available endpoints',\n              operationId: 'getToolInfo',\n              tags: ['Information'],\n              responses: {\n                '200': {\n                  description: 'Tool information retrieved successfully',\n                  content: {\n                    'application/json': {\n                      schema: {\n                        type: 'object',\n                        properties: {\n                          name: { type: 'string' },\n                          version: { type: 'string' },\n                          description: { type: 'string' },\n                          capabilities: {\n                            type: 'array',\n                            items: { type: 'string' },\n                          },\n                          status: { type: 'string' },\n                          endpoints: { type: 'object' },\n                        },\n                      },\n                    },\n                  },\n                },\n              },\n            },\n          },\n        },\n\n        // Security schemes\n        components: {\n          ...baseDocumentation.components,\n          securitySchemes: {\n            apiKey: {\n              type: 'apiKey',\n              in: 'header',\n              name: 'X-API-Key',\n              description:\n                'API key for tool authentication. Can also be provided as \"Authorization: Bearer <key>\"',\n            },\n          },\n          schemas: {\n            ...baseDocumentation.components?.schemas,\n            Error: {\n              type: 'object',\n              properties: {\n                code: { type: 'string', description: 'Error code' },\n                message: { type: 'string', description: 'Error message' },\n                type: { type: 'string', description: 'Error type' },\n                retryable: {\n                  type: 'boolean',\n                  description: 'Whether the error is retryable',\n                },\n                retryAfterMs: {\n                  type: 'number',\n                  description: 'Milliseconds to wait before retry',\n                },\n              },\n            },\n          },\n        },\n\n        // Tags for organization\n        tags: [\n          {\n            name: 'Tool Execution',\n            description: 'Core tool execution endpoints',\n          },\n          {\n            name: 'Health & Monitoring',\n            description: 'Health checks and performance monitoring',\n          },\n          {\n            name: 'Information',\n            description: 'Tool information and discovery',\n          },\n        ],\n\n        // External documentation\n        externalDocs: {\n          description: 'AI Spine Tools SDK Documentation',\n          url: 'https://github.com/your-org/ai-spine-tools-sdk',\n        },\n\n        // Custom extensions\n        'x-tool-config': {\n          authentication_required: this.config.security?.requireAuth || false,\n          rate_limiting: this.config.rateLimit\n            ? {\n                window_ms: this.config.rateLimit.windowMs,\n                max_requests: this.config.rateLimit.max,\n              }\n            : null,\n          cors_enabled: !!this.config.cors,\n          monitoring_enabled: this.config.monitoring?.enableMetrics || false,\n        },\n\n        'x-integration-examples': {\n          curl: {\n            basic_execution: `curl -X POST ${this.config.port ? `http://localhost:${this.config.port}` : 'http://localhost:3000'}/api/execute \\\\\n  -H \"Content-Type: application/json\" \\\\${\n    this.config.security?.requireAuth\n      ? `\n  -H \"X-API-Key: your-api-key\" \\\\`\n      : ''\n  }\n  -d '${JSON.stringify(\n    {\n      input_data: this.generateBasicExampleInput(),\n    },\n    null,\n    2\n  ).replace(/\\n/g, '\\n      ')}'`,\n            health_check: `curl ${this.config.port ? `http://localhost:${this.config.port}` : 'http://localhost:3000'}/health`,\n            schema: `curl ${this.config.port ? `http://localhost:${this.config.port}` : 'http://localhost:3000'}/schema`,\n          },\n          javascript: {\n            basic_execution: `const response = await fetch('${this.config.port ? `http://localhost:${this.config.port}` : 'http://localhost:3000'}/api/execute', {\n  method: 'POST',\n  headers: {\n    'Content-Type': 'application/json',${\n      this.config.security?.requireAuth\n        ? `\n    'X-API-Key': 'your-api-key',`\n        : ''\n    }\n  },\n  body: JSON.stringify({\n    input_data: ${JSON.stringify(this.generateBasicExampleInput(), null, 6).replace(/\\n/g, '\\n    ')}\n  })\n});\n\nconst result = await response.json();\nconsole.log(result);`,\n          },\n          python: {\n            basic_execution: `import requests\n\nresponse = requests.post('${this.config.port ? `http://localhost:${this.config.port}` : 'http://localhost:3000'}/api/execute', \n    json={\n        'input_data': ${JSON.stringify(this.generateBasicExampleInput(), null, 8).replace(/\\n/g, '\\n        ')}\n    },${\n      this.config.security?.requireAuth\n        ? `\n    headers={'X-API-Key': 'your-api-key'},`\n        : ''\n    }\n)\n\nresult = response.json()\nprint(result)`,\n          },\n        },\n      };\n\n      const schemaGenerationDuration =\n        performance.now() - schemaGenerationStart;\n\n      // Add generation metadata\n      (enhancedDocumentation as any)['x-generation-info'] = {\n        generated_at: new Date().toISOString(),\n        generation_time_ms: Math.round(schemaGenerationDuration),\n        sdk_version: '1.0.0',\n        tool_state: this.state,\n      };\n\n      // Set appropriate headers\n      res.set({\n        'Content-Type': 'application/json',\n        'Cache-Control': 'public, max-age=300', // Cache for 5 minutes\n        'X-Schema-Version': this.definition.metadata.version,\n        'X-Generation-Time': Math.round(schemaGenerationDuration).toString(),\n      });\n\n      res.json(enhancedDocumentation);\n    } catch (error) {\n      const schemaGenerationDuration =\n        performance.now() - schemaGenerationStart;\n\n      // Detailed error response for schema generation failures\n      const errorResponse = {\n        error: {\n          code: 'SCHEMA_GENERATION_ERROR',\n          message: 'Failed to generate API schema documentation',\n          type: 'server_error',\n          details: {\n            error_message: (error as Error).message,\n            generation_time_ms: Math.round(schemaGenerationDuration),\n            timestamp: new Date().toISOString(),\n          },\n        },\n        fallback_info: {\n          tool_name: this.definition.metadata.name,\n          tool_version: this.definition.metadata.version,\n          available_endpoints: [\n            'POST /api/execute - Execute the tool',\n            'GET /health - Health check',\n            'GET /metrics - Performance metrics',\n            'GET /schema - This endpoint (when working)',\n            'GET / - Basic tool information',\n          ],\n        },\n      };\n\n      res.status(500).json(errorResponse);\n    }\n  }\n\n  /**\n   * Handles the /metrics endpoint with detailed performance analytics\n   *\n   * This endpoint provides comprehensive performance metrics including:\n   * - Execution statistics and trends\n   * - Response time analytics\n   * - Error tracking and categorization\n   * - Resource usage monitoring\n   * - Rate limiting statistics\n   *\n   * @private\n   */\n  private async handleMetrics(_req: Request, res: Response): Promise<void> {\n    const metricsGenerationStart = performance.now();\n\n    try {\n      // Update metrics to ensure current data\n      this.updateMetrics();\n\n      // Calculate additional analytics\n      const now = Date.now();\n      const oneHourAgo = now - 60 * 60 * 1000;\n      const oneDayAgo = now - 24 * 60 * 60 * 1000;\n\n      const recentExecutions = this.executionHistory.filter(\n        e =>\n          now - e.timestamp.getTime() <\n          (this.config.monitoring?.metricsRetention || 24 * 60 * 60 * 1000)\n      );\n\n      const hourlyExecutions = recentExecutions.filter(\n        e => e.timestamp.getTime() > oneHourAgo\n      );\n      const dailyExecutions = recentExecutions.filter(\n        e => e.timestamp.getTime() > oneDayAgo\n      );\n\n      // Calculate success rates by time period\n      const hourlySuccessRate =\n        hourlyExecutions.length > 0\n          ? (hourlyExecutions.filter(e => e.success).length /\n              hourlyExecutions.length) *\n            100\n          : 100;\n\n      const dailySuccessRate =\n        dailyExecutions.length > 0\n          ? (dailyExecutions.filter(e => e.success).length /\n              dailyExecutions.length) *\n            100\n          : 100;\n\n      // Performance percentiles calculation\n      const responseTimes = recentExecutions.map(e => e.durationMs || 0);\n      responseTimes.sort((a, b) => a - b);\n\n      const getPercentile = (arr: number[], percentile: number): number => {\n        if (arr.length === 0) return 0;\n        const index = Math.ceil((percentile / 100) * arr.length) - 1;\n        return arr[index] || 0;\n      };\n\n      // Enhanced metrics response\n      const enhancedMetrics = {\n        // Core metrics (existing)\n        ...this.metrics,\n\n        // Time-based analytics\n        analytics: {\n          success_rates: {\n            overall_percent: 100 - this.metrics.errorRatePercent,\n            last_hour_percent: hourlySuccessRate,\n            last_24h_percent: dailySuccessRate,\n          },\n\n          execution_counts: {\n            total: this.metrics.totalExecutions,\n            last_hour: hourlyExecutions.length,\n            last_24h: dailyExecutions.length,\n            successful: this.metrics.successfulExecutions,\n            failed: this.metrics.failedExecutions,\n          },\n\n          response_time_distribution: {\n            p50_ms: getPercentile(responseTimes, 50),\n            p75_ms: getPercentile(responseTimes, 75),\n            p90_ms: getPercentile(responseTimes, 90),\n            p95_ms: getPercentile(responseTimes, 95),\n            p99_ms: getPercentile(responseTimes, 99),\n            min_ms: this.metrics.minExecutionTimeMs,\n            max_ms: this.metrics.maxExecutionTimeMs,\n            avg_ms: this.metrics.averageExecutionTimeMs,\n          },\n\n          error_breakdown: this.metrics.recentErrors,\n\n          trend_indicators: {\n            execution_trend: this.calculateTrend(\n              recentExecutions.map(e => ({\n                timestamp: e.timestamp.getTime(),\n                value: 1,\n              }))\n            ),\n            response_time_trend: this.calculateTrend(\n              recentExecutions.map(e => ({\n                timestamp: e.timestamp.getTime(),\n                value: e.durationMs || 0,\n              }))\n            ),\n            error_rate_trend: this.calculateTrend(\n              recentExecutions.map(e => ({\n                timestamp: e.timestamp.getTime(),\n                value: e.success ? 0 : 1,\n              }))\n            ),\n          },\n        },\n\n        // System health indicators\n        health_indicators: {\n          status:\n            this.metrics.errorRatePercent > 50\n              ? 'critical'\n              : this.metrics.errorRatePercent > 10\n                ? 'warning'\n                : 'healthy',\n          performance_score: this.calculatePerformanceScore(),\n          availability_percent: this.calculateAvailability(),\n          throughput_score: this.calculateThroughputScore(),\n        },\n\n        // Resource utilization\n        resources: {\n          memory: {\n            used_bytes: this.metrics.memoryUsageBytes,\n            used_mb: Math.round(this.metrics.memoryUsageBytes / 1024 / 1024),\n            heap_info: process.memoryUsage(),\n          },\n\n          cpu: {\n            usage_percent: this.metrics.cpuUsagePercent || 0,\n          },\n\n          network: {\n            requests_per_minute: this.metrics.requestsPerMinute,\n            active_connections: this.executionHistory.filter(\n              e => now - e.timestamp.getTime() < 60000 // Last minute\n            ).length,\n          },\n        },\n\n        // Tool configuration impact\n        configuration_metrics: {\n          rate_limiting: this.config.rateLimit\n            ? {\n                ...this.metrics.rateLimiting,\n                efficiency_percent: this.metrics.rateLimiting\n                  ? (this.metrics.rateLimiting.currentWindowRequests /\n                      (this.config.rateLimit.max || 1)) *\n                    100\n                  : 0,\n              }\n            : null,\n\n          authentication_enabled: this.config.security?.requireAuth || false,\n          monitoring_overhead_ms: Math.round(\n            performance.now() - metricsGenerationStart\n          ),\n        },\n\n        // Metadata\n        metrics_metadata: {\n          generated_at: new Date().toISOString(),\n          generation_time_ms: Math.round(\n            performance.now() - metricsGenerationStart\n          ),\n          retention_period_ms:\n            this.config.monitoring?.metricsRetention || 24 * 60 * 60 * 1000,\n          data_points_included: recentExecutions.length,\n          uptime_seconds: this.metrics.uptimeSeconds,\n        },\n      };\n\n      // Set appropriate headers\n      res.set({\n        'Content-Type': 'application/json',\n        'Cache-Control': 'no-cache, no-store, must-revalidate',\n        'X-Metrics-Generated': new Date().toISOString(),\n        'X-Data-Points': recentExecutions.length.toString(),\n      });\n\n      res.json(enhancedMetrics);\n    } catch (error) {\n      const metricsGenerationDuration =\n        performance.now() - metricsGenerationStart;\n\n      this.sendStandardError(\n        res,\n        {\n          code: 'METRICS_GENERATION_ERROR',\n          message: 'Failed to generate performance metrics',\n          type: 'server_error',\n          statusCode: 500,\n          details: {\n            error_message: (error as Error).message,\n            generation_time_ms: Math.round(metricsGenerationDuration),\n            fallback_metrics: {\n              uptime_seconds: this.metrics.uptimeSeconds,\n              total_executions: this.metrics.totalExecutions,\n              error_rate_percent: this.metrics.errorRatePercent,\n            },\n          },\n        },\n        res.locals.requestId\n      );\n    }\n  }\n\n  /**\n   * Calculates trend direction for a series of data points\n   * @private\n   */\n  private calculateTrend(\n    dataPoints: Array<{ timestamp: number; value: number }>\n  ): 'increasing' | 'decreasing' | 'stable' | 'insufficient_data' {\n    if (dataPoints.length < 2) return 'insufficient_data';\n\n    // Simple linear regression slope calculation\n    const n = dataPoints.length;\n    const sumX = dataPoints.reduce((sum, point) => sum + point.timestamp, 0);\n    const sumY = dataPoints.reduce((sum, point) => sum + point.value, 0);\n    const sumXY = dataPoints.reduce(\n      (sum, point) => sum + point.timestamp * point.value,\n      0\n    );\n    const sumXX = dataPoints.reduce(\n      (sum, point) => sum + point.timestamp * point.timestamp,\n      0\n    );\n\n    const slope = (n * sumXY - sumX * sumY) / (n * sumXX - sumX * sumX);\n\n    // Determine trend based on slope\n    if (Math.abs(slope) < 0.001) return 'stable';\n    return slope > 0 ? 'increasing' : 'decreasing';\n  }\n\n  /**\n   * Calculates overall performance score (0-100)\n   * @private\n   */\n  private calculatePerformanceScore(): number {\n    let score = 100;\n\n    // Deduct points for high error rate\n    score -= this.metrics.errorRatePercent * 2;\n\n    // Deduct points for slow response times\n    if (this.metrics.averageExecutionTimeMs > 1000) {\n      score -= Math.min(30, (this.metrics.averageExecutionTimeMs - 1000) / 100);\n    }\n\n    // Deduct points for high memory usage\n    const memoryUsageMB = this.metrics.memoryUsageBytes / 1024 / 1024;\n    if (memoryUsageMB > 100) {\n      score -= Math.min(20, (memoryUsageMB - 100) / 20);\n    }\n\n    return Math.max(0, Math.round(score));\n  }\n\n  /**\n   * Calculates availability percentage\n   * @private\n   */\n  private calculateAvailability(): number {\n    if (this.metrics.totalExecutions === 0) return 100;\n    return Math.round(\n      ((this.metrics.totalExecutions - this.metrics.failedExecutions) /\n        this.metrics.totalExecutions) *\n        100\n    );\n  }\n\n  /**\n   * Calculates throughput score based on requests per minute\n   * @private\n   */\n  private calculateThroughputScore(): number {\n    const rpm = this.metrics.requestsPerMinute;\n    if (rpm === 0) return 0;\n    if (rpm >= 60) return 100; // Excellent throughput\n    if (rpm >= 30) return 80; // Good throughput\n    if (rpm >= 10) return 60; // Fair throughput\n    if (rpm >= 1) return 40; // Low throughput\n    return 20; // Very low throughput\n  }\n\n  /**\n   * Generates basic example input data for documentation\n   * @private\n   */\n  private generateBasicExampleInput(): any {\n    const inputSchema = this.definition.schema.input;\n    if (!inputSchema || Object.keys(inputSchema).length === 0) {\n      return {};\n    }\n\n    const exampleInput: any = {};\n\n    for (const [key, field] of Object.entries(inputSchema)) {\n      if (field.example !== undefined) {\n        exampleInput[key] = field.example;\n      } else {\n        // Generate basic example based on field type\n        switch (field.type) {\n          case 'string':\n            exampleInput[key] =\n              field.format === 'email'\n                ? 'example@email.com'\n                : field.format === 'url'\n                  ? 'https://example.com'\n                  : 'example';\n            break;\n          case 'number':\n            exampleInput[key] = 42;\n            break;\n          case 'boolean':\n            exampleInput[key] = true;\n            break;\n          case 'array':\n            exampleInput[key] = ['example'];\n            break;\n          case 'object':\n            exampleInput[key] = {};\n            break;\n          case 'enum':\n            // Note: ToolInputField doesn't have values property in current types\n            exampleInput[key] = 'option1';\n            break;\n          default:\n            exampleInput[key] = 'example';\n        }\n      }\n    }\n\n    return exampleInput;\n  }\n\n  /**\n   * Generates OpenAPI request body schema for the execute endpoint\n   * @private\n   */\n  private generateRequestBodySchema(): any {\n    const schema: any = {\n      type: 'object',\n      properties: {},\n      required: [],\n    };\n\n    // Add input_data property if input schema exists\n    if (\n      this.definition.schema.input &&\n      Object.keys(this.definition.schema.input).length > 0\n    ) {\n      schema.properties.input_data = {\n        type: 'object',\n        properties: {},\n        required: [],\n      };\n\n      // Generate schema for each input field\n      for (const [key, field] of Object.entries(this.definition.schema.input)) {\n        schema.properties.input_data.properties[key] =\n          DocumentationGenerator.generateOpenAPISchema(field);\n        if (field.required) {\n          schema.properties.input_data.required.push(key);\n        }\n      }\n\n      schema.required.push('input_data');\n    }\n\n    // Add config property if config schema exists\n    if (\n      this.definition.schema.config &&\n      Object.keys(this.definition.schema.config).length > 0\n    ) {\n      schema.properties.config = {\n        type: 'object',\n        properties: {},\n        required: [],\n      };\n\n      // Generate schema for each config field\n      for (const [key, field] of Object.entries(\n        this.definition.schema.config\n      )) {\n        schema.properties.config.properties[key] =\n          DocumentationGenerator.generateOpenAPISchema(field);\n        if (field.required) {\n          schema.properties.config.required.push(key);\n        }\n      }\n    }\n\n    return schema;\n  }\n\n  /**\n   * Records execution statistics\n   * @private\n   */\n  private recordExecution(stats: ExecutionStats): void {\n    this.executionHistory.push(stats);\n\n    // Keep only recent executions to prevent memory leak\n    const maxHistory = 1000;\n    if (this.executionHistory.length > maxHistory) {\n      this.executionHistory = this.executionHistory.slice(-maxHistory);\n    }\n\n    // Update error counts\n    if (!stats.success && stats.errorCode) {\n      this.metrics.recentErrors[stats.errorCode] =\n        (this.metrics.recentErrors[stats.errorCode] || 0) + 1;\n    }\n\n    this.updateMetrics();\n  }\n\n  /**\n   * Updates calculated metrics\n   * @private\n   */\n  private updateMetrics(): void {\n    const now = Date.now();\n    const recentExecutions = this.executionHistory.filter(\n      e =>\n        now - e.timestamp.getTime() <\n        (this.config.monitoring?.metricsRetention || 24 * 60 * 60 * 1000)\n    );\n\n    this.metrics.totalExecutions = recentExecutions.length;\n    this.metrics.successfulExecutions = recentExecutions.filter(\n      e => e.success\n    ).length;\n    this.metrics.failedExecutions = recentExecutions.filter(\n      e => !e.success\n    ).length;\n\n    if (recentExecutions.length > 0) {\n      const durations = recentExecutions.map(e => e.durationMs || 0);\n      this.metrics.averageExecutionTimeMs =\n        durations.reduce((a, b) => a + b, 0) / durations.length;\n      this.metrics.minExecutionTimeMs = Math.min(...durations);\n      this.metrics.maxExecutionTimeMs = Math.max(...durations);\n      this.metrics.lastExecutionAt = new Date(\n        Math.max(...recentExecutions.map(e => e.timestamp.getTime()))\n      );\n    }\n\n    this.metrics.errorRatePercent =\n      this.metrics.totalExecutions > 0\n        ? (this.metrics.failedExecutions / this.metrics.totalExecutions) * 100\n        : 0;\n\n    // Calculate requests per minute\n    const oneMinuteAgo = now - 60 * 1000;\n    const recentMinuteExecutions = recentExecutions.filter(\n      e => e.timestamp.getTime() > oneMinuteAgo\n    );\n    this.metrics.requestsPerMinute = recentMinuteExecutions.length;\n\n    this.metrics.uptimeSeconds = Math.floor((now - this.startTime) / 1000);\n\n    // Update memory usage\n    const memUsage = process.memoryUsage();\n    this.metrics.memoryUsageBytes = memUsage.heapUsed;\n\n    // Clean old error counts\n    const oldErrors = Object.keys(this.metrics.recentErrors);\n    for (const errorCode of oldErrors) {\n      const errorCount = this.metrics.recentErrors[errorCode];\n      if (errorCount === 0) {\n        delete this.metrics.recentErrors[errorCode];\n      }\n    }\n\n    // Call custom metrics handler if configured\n    if (this.config.monitoring?.customMetrics) {\n      this.config.monitoring.customMetrics(this.metrics);\n    }\n  }\n\n  /**\n   * Event emitter functionality\n   * @private\n   */\n  private emit<K extends keyof ToolEvents>(\n    event: K,\n    ...args: Parameters<ToolEvents[K]>\n  ): void {\n    const listener = this.eventListeners[event];\n    if (listener) {\n      (listener as any)(...args);\n    }\n  }\n\n  /**\n   * Sets the tool configuration\n   *\n   * @param config - Tool configuration object\n   *\n   * @example\n   * ```typescript\n   * await tool.setConfig({\n   *   apiKey: 'your-api-key-here',\n   *   timeout: 30000\n   * });\n   * ```\n   */\n  public async setConfig(config: TConfig): Promise<void> {\n    const validation = await this.validator.validateConfig(\n      config as any,\n      this.definition.schema.config\n    );\n\n    if (!validation.success) {\n      throw new ConfigurationError(\n        'Configuration validation failed',\n        validation.errors?.map(e => e.path.join('.'))\n      );\n    }\n\n    this.toolConfig = validation.data as TConfig;\n\n    // Call setup function if provided\n    if (this.definition.setup) {\n      await this.definition.setup(this.toolConfig);\n    }\n  }\n\n  /**\n   * Adds an event listener\n   *\n   * @param event - Event name\n   * @param listener - Event listener function\n   *\n   * @example\n   * ```typescript\n   * tool.on('beforeExecution', (context) => {\n   *   console.log(`Executing tool for request ${context.requestId}`);\n   * });\n   * ```\n   */\n  public on<K extends keyof ToolEvents>(\n    event: K,\n    listener: ToolEvents[K]\n  ): void {\n    this.eventListeners[event] = listener;\n  }\n\n  /**\n   * Removes an event listener\n   *\n   * @param event - Event name\n   */\n  public off<K extends keyof ToolEvents>(event: K): void {\n    delete this.eventListeners[event];\n  }\n\n  /**\n   * Starts the tool server\n   *\n   * @param config - Server configuration options\n   * @returns Promise that resolves when server is started\n   *\n   * @example\n   * ```typescript\n   * await tool.start({\n   *   port: 3000,\n   *   host: '0.0.0.0',\n   *   security: {\n   *     apiKeys: ['your-api-key'],\n   *     requireAuth: true\n   *   }\n   * });\n   * ```\n   */\n  public async start(config: ToolServerConfig = {}): Promise<void> {\n    if (this.state !== 'stopped') {\n      throw new Error(`Cannot start tool in state: ${this.state}`);\n    }\n\n    this.setState('starting');\n    this.config = { ...config };\n\n    // Recreate Express app to ensure clean middleware stack\n    this.app = express();\n    this.setupExpressApp();\n\n    try {\n      // Set up API keys for authentication\n      if (this.config.security?.apiKeys) {\n        this.validApiKeys = new Set(this.config.security.apiKeys);\n      }\n\n      // Set trust proxy if configured\n      if (this.config.security?.trustProxy !== undefined) {\n        this.app.set('trust proxy', this.config.security.trustProxy);\n      }\n\n      // Apply middleware in correct order\n      this.applyCorsConfiguration();\n      this.applyRateLimiting();\n      this.setupAuthentication();\n      this.setupRoutes();\n\n      // Start server\n      const port = this.config.port !== undefined ? this.config.port : 3000;\n      const host = this.config.host || '0.0.0.0';\n\n      await new Promise<void>((resolve, reject) => {\n        this.server = this.app.listen(port, host, () => {\n          this.setState('running');\n          this.startTime = Date.now(); // Set actual start time when server is running\n          this.emit('serverStarted', port, host);\n          resolve();\n        });\n\n        this.server.on('error', reject);\n      });\n\n      console.log(\n        `🚀 Tool \"${this.definition.metadata.name}\" v${this.definition.metadata.version} started on ${host}:${port}`\n      );\n    } catch (error) {\n      this.setState('error');\n      throw new ExecutionError(\n        `Failed to start tool server: ${(error as Error).message}`,\n        error as Error\n      );\n    }\n  }\n\n  /**\n   * Stops the tool server\n   *\n   * @returns Promise that resolves when server is stopped\n   *\n   * @example\n   * ```typescript\n   * await tool.stop();\n   * ```\n   */\n  public async stop(): Promise<void> {\n    if (this.state !== 'running') {\n      throw new Error(`Cannot stop tool in state: ${this.state}`);\n    }\n\n    this.setState('stopping');\n\n    try {\n      if (this.server) {\n        await new Promise<void>((resolve, reject) => {\n          const timeout = this.config.timeouts?.shutdown || 10000;\n\n          const timeoutId = setTimeout(() => {\n            reject(new Error('Server shutdown timed out'));\n          }, timeout);\n\n          this.server.close((error: any) => {\n            clearTimeout(timeoutId);\n            if (error) {\n              reject(error);\n            } else {\n              resolve();\n            }\n          });\n        });\n      }\n\n      // Call cleanup function if provided\n      if (this.definition.cleanup) {\n        await this.definition.cleanup();\n      }\n\n      this.setState('stopped');\n      this.emit('serverStopped');\n\n      console.log(\n        `✅ Tool \"${this.definition.metadata.name}\" stopped successfully`\n      );\n    } catch (error) {\n      this.setState('error');\n      throw new ExecutionError(\n        `Failed to stop tool server: ${(error as Error).message}`,\n        error as Error\n      );\n    }\n  }\n\n  /**\n   * Restarts the tool server with optional new configuration\n   *\n   * @param config - Optional new configuration\n   * @returns Promise that resolves when server is restarted\n   *\n   * @example\n   * ```typescript\n   * await tool.restart({ port: 3001 });\n   * ```\n   */\n  public async restart(config?: ToolServerConfig): Promise<void> {\n    if (this.state === 'running') {\n      await this.stop();\n    }\n\n    if (config) {\n      this.config = { ...this.config, ...config };\n    }\n\n    await this.start(this.config);\n  }\n\n  /**\n   * Sets the tool state and emits state change event\n   * @private\n   */\n  private setState(newState: ToolState): void {\n    const oldState = this.state;\n    this.state = newState;\n    this.emit('stateChange', oldState, newState);\n  }\n\n  /**\n   * Gets the current tool state\n   *\n   * @returns Current tool state\n   */\n  public getState(): ToolState {\n    return this.state;\n  }\n\n  /**\n   * Gets current tool metrics\n   *\n   * @returns Current metrics object\n   */\n  public getMetrics(): ToolMetrics {\n    this.updateMetrics();\n    return { ...this.metrics };\n  }\n\n  /**\n   * Gets tool metadata\n   *\n   * @returns Tool metadata object\n   */\n  public getMetadata(): ToolMetadata {\n    return this.definition.metadata;\n  }\n\n  /**\n   * Gets tool schema\n   *\n   * @returns Tool schema object\n   */\n  public getSchema(): ToolSchema {\n    return this.definition.schema;\n  }\n\n  /**\n   * Tests tool execution with provided input (dry run)\n   *\n   * @param input - Test input data\n   * @param config - Optional configuration (uses set config if not provided)\n   * @returns Validation result and execution result if successful\n   *\n   * @example\n   * ```typescript\n   * const testResult = await tool.test({\n   *   city: 'Madrid',\n   *   units: 'metric'\n   * });\n   *\n   * if (testResult.valid) {\n   *   console.log('Test execution result:', testResult.result);\n   * }\n   * ```\n   */\n  public async test(\n    input: TInput,\n    config?: TConfig\n  ): Promise<{\n    valid: boolean;\n    errors?: string[];\n    result?: ToolExecutionResult;\n  }> {\n    try {\n      // Validate input\n      const inputValidation = await this.validator.validateInput(\n        input as any,\n        this.definition.schema.input\n      );\n\n      if (!inputValidation.success) {\n        return {\n          valid: false,\n          errors: inputValidation.errors?.map(\n            e => `${e.path.join('.')}: ${e.message}`\n          ),\n        };\n      }\n\n      // Use provided config or tool config\n      let validatedConfig: TConfig;\n      if (config) {\n        const configValidation = await this.validator.validateConfig(\n          config as any,\n          this.definition.schema.config\n        );\n\n        if (!configValidation.success) {\n          return {\n            valid: false,\n            errors: configValidation.errors?.map(\n              e => `config.${e.path.join('.')}: ${e.message}`\n            ),\n          };\n        }\n\n        validatedConfig = configValidation.data as TConfig;\n      } else if (this.toolConfig) {\n        validatedConfig = this.toolConfig;\n      } else {\n        return {\n          valid: false,\n          errors: ['No configuration provided and no tool configuration set'],\n        };\n      }\n\n      // Create test execution context\n      const context: ToolExecutionContext = {\n        executionId: `test-${randomUUID()}`,\n        toolId: this.definition.metadata.name,\n        toolVersion: this.definition.metadata.version,\n        timestamp: new Date(),\n        environment: 'test',\n        performance: {\n          startTime: performance.now(),\n        },\n        flags: {\n          dryRun: true,\n        },\n      };\n\n      // Execute tool\n      const result = await this.definition.execute(\n        inputValidation.data as TInput,\n        validatedConfig,\n        context\n      );\n\n      return {\n        valid: true,\n        result,\n      };\n    } catch (error) {\n      return {\n        valid: false,\n        errors: [(error as Error).message],\n      };\n    }\n  }\n}\n"],"names":["z","express","helmet","randomUUID","cors","rateLimit","createHash","performance"],"mappings":"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"}