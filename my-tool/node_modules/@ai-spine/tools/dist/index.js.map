{"version":3,"file":"index.js","sources":["../../../../src/create-tool.ts"],"sourcesContent":["import {\n  ToolMetadata,\n  ToolInputField,\n  ToolConfigField,\n  ToolInput,\n  ToolConfig,\n  ToolDefinition,\n  ToolExecutionContext,\n  ToolExecutionResult,\n  ToolSchema,\n  ConfigurationError,\n  ValidationError,\n  Tool,\n} from '@ai-spine/tools-core';\n\n/**\n * Options for creating a new AI Spine tool.\n * This interface defines the complete configuration needed to create a functional tool.\n *\n * @template TInput - The input data type for the tool\n * @template TConfig - The configuration type for the tool\n *\n * @example\n * ```typescript\n * const options: CreateToolOptions<WeatherInput, WeatherConfig> = {\n *   metadata: {\n *     name: 'weather-tool',\n *     version: '1.0.0',\n *     description: 'Get weather information for cities',\n *     capabilities: ['weather.current', 'weather.forecast']\n *   },\n *   schema: {\n *     input: {\n *       city: stringField().required().minLength(2).description('City name').build()\n *     },\n *     config: {\n *       apiKey: apiKeyField().required().envVar('WEATHER_API_KEY').build()\n *     }\n *   },\n *   execute: async (input, config, context) => {\n *     // Tool implementation\n *     return { status: 'success', data: { temperature: 22 } };\n *   }\n * };\n * ```\n */\nexport interface CreateToolOptions<\n  TInput extends ToolInput = ToolInput,\n  TConfig extends ToolConfig = ToolConfig,\n> {\n  /** Tool metadata including name, version, description, and capabilities */\n  metadata: ToolMetadata;\n\n  /** Input and configuration validation schema */\n  schema: ToolSchema;\n\n  /** Main tool execution function */\n  execute: (\n    input: TInput,\n    config: TConfig,\n    context: ToolExecutionContext\n  ) => Promise<ToolExecutionResult>;\n\n  /** Optional setup function called when tool configuration is set */\n  setup?: (config: TConfig) => Promise<void>;\n\n  /** Optional cleanup function called when tool is stopped */\n  cleanup?: () => Promise<void>;\n\n  /** Optional health check function for monitoring */\n  healthCheck?: () => Promise<{\n    status: 'healthy' | 'unhealthy' | 'degraded';\n    details?: Record<string, any>;\n  }>;\n}\n\n/**\n * Creates a new AI Spine tool with comprehensive type safety, validation, and lifecycle management.\n * This is the primary factory function for creating tools that can be used by AI agents.\n *\n * Key features:\n * - Type-safe generics for input and configuration\n * - Comprehensive validation of tool definition\n * - Intelligent defaults for common patterns\n * - Plugin integration points for extensibility\n * - Developer experience optimizations\n *\n * @template TInput - The input data type for the tool (inferred from schema)\n * @template TConfig - The configuration type for the tool (inferred from schema)\n *\n * @param options - Complete tool configuration options\n * @returns A fully configured Tool instance ready to be started\n *\n * @throws {ConfigurationError} When tool definition is invalid\n * @throws {ValidationError} When schema validation fails\n *\n * @example\n * ```typescript\n * // Create a weather tool with type safety\n * const weatherTool = createTool({\n *   metadata: {\n *     name: 'weather-tool',\n *     version: '1.0.0',\n *     description: 'Fetches current weather data for any city',\n *     capabilities: ['weather.current', 'weather.forecast'],\n *     author: 'Your Name',\n *     tags: ['weather', 'api']\n *   },\n *   schema: {\n *     input: {\n *       city: stringField({\n *         required: true,\n *         description: 'Name of the city to get weather for',\n *         minLength: 2,\n *         maxLength: 100,\n *         example: 'Madrid'\n *       }),\n *       units: {\n *         type: 'enum',\n *         required: false,\n *         description: 'Temperature units',\n *         enum: ['celsius', 'fahrenheit', 'kelvin'],\n *         default: 'celsius'\n *       }\n *     },\n *     config: {\n *       apiKey: {\n *         type: 'apiKey',\n *         required: true,\n *         description: 'OpenWeatherMap API key',\n *         secret: true,\n *         envVar: 'OPENWEATHER_API_KEY'\n *       },\n *       baseUrl: {\n *         type: 'url',\n *         required: false,\n *         description: 'Base URL for the weather API',\n *         default: 'https://api.openweathermap.org/data/2.5'\n *       }\n *     }\n *   },\n *   execute: async (input, config, context) => {\n *     // Tool implementation with full type safety\n *     const response = await fetch(\n *       `${config.baseUrl}/weather?q=${input.city}&appid=${config.apiKey}&units=${input.units || 'celsius'}`\n *     );\n *\n *     if (!response.ok) {\n *       return {\n *         status: 'error',\n *         error: {\n *           code: 'API_ERROR',\n *           message: 'Failed to fetch weather data',\n *           type: 'network_error',\n *           retryable: true\n *         }\n *       };\n *     }\n *\n *     const data = await response.json();\n *\n *     return {\n *       status: 'success',\n *       data: {\n *         city: data.name,\n *         temperature: data.main.temp,\n *         description: data.weather[0].description,\n *         humidity: data.main.humidity,\n *         pressure: data.main.pressure\n *       },\n *       timing: {\n *         executionTimeMs: Date.now() - context.performance!.startTime,\n *         startedAt: new Date(context.performance!.startTime).toISOString(),\n *         completedAt: new Date().toISOString()\n *       }\n *     };\n *   },\n *   setup: async (config) => {\n *     // Validate API key by making a test request\n *     console.log('Validating weather API configuration...');\n *   },\n *   cleanup: async () => {\n *     console.log('Weather tool cleanup completed');\n *   },\n *   healthCheck: async () => {\n *     // Custom health check implementation\n *     return { status: 'healthy', details: { api: 'connected' } };\n *   }\n * });\n *\n * // Start the tool server\n * await weatherTool.start({\n *   port: 3000,\n *   security: {\n *     apiKeys: ['your-client-api-key'],\n *     requireAuth: true\n *   }\n * });\n * ```\n */\nexport function createTool<\n  TInput extends ToolInput = ToolInput,\n  TConfig extends ToolConfig = ToolConfig,\n>(options: CreateToolOptions<TInput, TConfig>): Tool<TInput, TConfig> {\n  // Step 1: Comprehensive validation of tool definition\n  validateToolDefinition(options);\n\n  // Step 2: Apply intelligent defaults and enhancements\n  const enhancedOptions = applyIntelligentDefaults(options);\n\n  // Step 3: Validate schema structure and field definitions\n  validateSchemaStructure(enhancedOptions.schema);\n\n  // Step 4: Create the complete tool definition\n  const definition: ToolDefinition<TInput, TConfig> = {\n    metadata: enhancedOptions.metadata,\n    schema: enhancedOptions.schema,\n    execute: enhancedOptions.execute,\n    setup: enhancedOptions.setup,\n    cleanup: enhancedOptions.cleanup,\n    healthCheck: enhancedOptions.healthCheck,\n  };\n\n  // Step 5: Create and return the tool instance\n  const tool = new Tool<TInput, TConfig>(definition);\n\n  // Step 6: Add development mode enhancements\n  if (\n    process.env.NODE_ENV === 'development' ||\n    process.env.AI_SPINE_DEBUG === 'true'\n  ) {\n    addDevelopmentEnhancements(tool, definition);\n  }\n\n  return tool;\n}\n\n/**\n * Advanced fluent API for creating tools with step-by-step configuration.\n * This class provides a builder pattern that enables incremental tool construction\n * with comprehensive validation and intelligent defaults.\n *\n * @template TInput - The input data type for the tool\n * @template TConfig - The configuration type for the tool\n *\n * @example\n * ```typescript\n * const tool = new ToolBuilder<WeatherInput, WeatherConfig>()\n *   .metadata({\n *     name: 'weather-tool',\n *     version: '1.0.0',\n *     description: 'Get weather information',\n *     capabilities: ['weather.current']\n *   })\n *   .inputField('city', stringField({ required: true, description: 'City name' }))\n *   .inputField('units', {\n *     type: 'enum',\n *     required: false,\n *     enum: ['celsius', 'fahrenheit'],\n *     default: 'celsius'\n *   })\n *   .configField('apiKey', apiKeyField({ required: true, envVar: 'WEATHER_API_KEY' }))\n *   .execute(async (input, config, context) => {\n *     // Implementation here\n *     return { status: 'success', data: { temperature: 22 } };\n *   })\n *   .onSetup(async (config) => {\n *     console.log('Setting up weather tool...');\n *   })\n *   .build();\n *\n * await tool.start({ port: 3000 });\n * ```\n */\nexport class ToolBuilder<\n  TInput extends ToolInput = ToolInput,\n  TConfig extends ToolConfig = ToolConfig,\n> {\n  private _metadata?: ToolMetadata;\n  private _inputSchema: Record<string, ToolInputField> = {};\n  private _configSchema: Record<string, ToolConfigField> = {};\n  private _executeFunction?: (\n    input: TInput,\n    config: TConfig,\n    context: ToolExecutionContext\n  ) => Promise<ToolExecutionResult>;\n  private _setupFunction?: (config: TConfig) => Promise<void>;\n  private _cleanupFunction?: () => Promise<void>;\n  private _healthCheckFunction?: () => Promise<{\n    status: 'healthy' | 'unhealthy' | 'degraded';\n    details?: Record<string, any>;\n  }>;\n  private _validationErrors: string[] = [];\n  private _built = false;\n\n  /**\n   * Set comprehensive tool metadata with validation.\n   *\n   * @param metadata - Complete metadata object\n   * @returns This builder instance for chaining\n   *\n   * @example\n   * ```typescript\n   * .metadata({\n   *   name: 'weather-tool',\n   *   version: '1.0.0',\n   *   description: 'Get current weather data',\n   *   capabilities: ['weather.current', 'weather.forecast'],\n   *   author: 'Your Name',\n   *   license: 'MIT',\n   *   tags: ['weather', 'api', 'external-service']\n   * })\n   * ```\n   */\n  metadata(metadata: ToolMetadata): ToolBuilder<TInput, TConfig> {\n    this.validateBuilderState();\n\n    // Validate metadata structure\n    if (!metadata.name || typeof metadata.name !== 'string') {\n      this._validationErrors.push(\n        'Tool name is required and must be a non-empty string'\n      );\n    }\n\n    if (!metadata.version || typeof metadata.version !== 'string') {\n      this._validationErrors.push(\n        'Tool version is required and must be a valid semver string'\n      );\n    }\n\n    if (!metadata.description || typeof metadata.description !== 'string') {\n      this._validationErrors.push(\n        'Tool description is required and must be a non-empty string'\n      );\n    }\n\n    if (\n      !Array.isArray(metadata.capabilities) ||\n      metadata.capabilities.length === 0\n    ) {\n      this._validationErrors.push(\n        'Tool capabilities must be a non-empty array'\n      );\n    }\n\n    this._metadata = metadata;\n    return this;\n  }\n\n  /**\n   * Define multiple input fields at once.\n   *\n   * @param schema - Input schema definition\n   * @returns This builder instance for chaining\n   *\n   * @example\n   * ```typescript\n   * .input({\n   *   city: stringField({ required: true, description: 'City name' }),\n   *   country: stringField({ required: false, description: 'Country code' }),\n   *   units: {\n   *     type: 'enum',\n   *     required: false,\n   *     enum: ['celsius', 'fahrenheit'],\n   *     default: 'celsius'\n   *   }\n   * })\n   * ```\n   */\n  input(schema: Record<string, ToolInputField>): ToolBuilder<TInput, TConfig> {\n    this.validateBuilderState();\n\n    if (!schema || typeof schema !== 'object') {\n      this._validationErrors.push('Input schema must be an object');\n    } else {\n      // Validate each field\n      Object.entries(schema).forEach(([name, field]) => {\n        if (!/^[a-zA-Z_][a-zA-Z0-9_]*$/.test(name)) {\n          this._validationErrors.push(\n            `Input field name '${name}' must be a valid identifier`\n          );\n        }\n        if (!field || typeof field !== 'object') {\n          this._validationErrors.push(\n            `Input field '${name}' must be a valid field definition`\n          );\n        }\n      });\n    }\n\n    this._inputSchema = { ...this._inputSchema, ...schema };\n    return this;\n  }\n\n  /**\n   * Add a single input field with validation.\n   *\n   * @param name - Field name\n   * @param field - Field definition\n   * @returns This builder instance for chaining\n   *\n   * @example\n   * ```typescript\n   * .inputField('city', stringField({\n   *   required: true,\n   *   description: 'Name of the city',\n   *   minLength: 2,\n   *   example: 'Madrid'\n   * }))\n   * .inputField('units', {\n   *   type: 'enum',\n   *   required: false,\n   *   enum: ['celsius', 'fahrenheit'],\n   *   default: 'celsius'\n   * })\n   * ```\n   */\n  inputField(\n    name: string,\n    field: ToolInputField\n  ): ToolBuilder<TInput, TConfig> {\n    this.validateBuilderState();\n\n    if (!name || typeof name !== 'string' || name.trim().length === 0) {\n      this._validationErrors.push(\n        'Input field name must be a non-empty string'\n      );\n    } else if (!/^[a-zA-Z_][a-zA-Z0-9_]*$/.test(name)) {\n      this._validationErrors.push(\n        `Input field name '${name}' must be a valid identifier (letters, numbers, underscores only)`\n      );\n    }\n\n    if (!field || typeof field !== 'object') {\n      this._validationErrors.push(\n        `Input field '${name}' must be a valid field definition object`\n      );\n    }\n\n    this._inputSchema[name] = field;\n    return this;\n  }\n\n  /**\n   * Define multiple configuration fields at once.\n   *\n   * @param schema - Configuration schema definition\n   * @returns This builder instance for chaining\n   *\n   * @example\n   * ```typescript\n   * .config({\n   *   apiKey: apiKeyField({ required: true, envVar: 'API_KEY' }),\n   *   baseUrl: configStringField({\n   *     required: false,\n   *     default: 'https://api.example.com',\n   *     description: 'API base URL'\n   *   }),\n   *   timeout: configNumberField({ required: false, default: 5000 })\n   * })\n   * ```\n   */\n  config(\n    schema: Record<string, ToolConfigField>\n  ): ToolBuilder<TInput, TConfig> {\n    this.validateBuilderState();\n\n    if (!schema || typeof schema !== 'object') {\n      this._validationErrors.push('Config schema must be an object');\n    } else {\n      // Validate each field\n      Object.entries(schema).forEach(([name, field]) => {\n        if (!/^[a-zA-Z_][a-zA-Z0-9_]*$/.test(name)) {\n          this._validationErrors.push(\n            `Config field name '${name}' must be a valid identifier`\n          );\n        }\n        if (!field || typeof field !== 'object') {\n          this._validationErrors.push(\n            `Config field '${name}' must be a valid field definition`\n          );\n        }\n      });\n    }\n\n    this._configSchema = { ...this._configSchema, ...schema };\n    return this;\n  }\n\n  /**\n   * Add a single configuration field with validation.\n   *\n   * @param name - Field name\n   * @param field - Field definition\n   * @returns This builder instance for chaining\n   *\n   * @example\n   * ```typescript\n   * .configField('apiKey', apiKeyField({\n   *   required: true,\n   *   envVar: 'WEATHER_API_KEY',\n   *   description: 'OpenWeatherMap API key'\n   * }))\n   * .configField('timeout', configNumberField({\n   *   required: false,\n   *   default: 5000,\n   *   description: 'Request timeout in milliseconds'\n   * }))\n   * ```\n   */\n  configField(\n    name: string,\n    field: ToolConfigField\n  ): ToolBuilder<TInput, TConfig> {\n    this.validateBuilderState();\n\n    if (!name || typeof name !== 'string' || name.trim().length === 0) {\n      this._validationErrors.push(\n        'Config field name must be a non-empty string'\n      );\n    } else if (!/^[a-zA-Z_][a-zA-Z0-9_]*$/.test(name)) {\n      this._validationErrors.push(\n        `Config field name '${name}' must be a valid identifier (letters, numbers, underscores only)`\n      );\n    }\n\n    if (!field || typeof field !== 'object') {\n      this._validationErrors.push(\n        `Config field '${name}' must be a valid field definition object`\n      );\n    }\n\n    this._configSchema[name] = field;\n    return this;\n  }\n\n  /**\n   * Set the main tool execution function with comprehensive type safety.\n   *\n   * @param fn - Tool execution function\n   * @returns This builder instance for chaining\n   *\n   * @example\n   * ```typescript\n   * .execute(async (input, config, context) => {\n   *   // Validate input\n   *   if (!input.city) {\n   *     return {\n   *       status: 'error',\n   *       error: {\n   *         code: 'MISSING_CITY',\n   *         message: 'City parameter is required',\n   *         type: 'validation_error'\n   *       }\n   *     };\n   *   }\n   *\n   *   // Execute tool logic\n   *   const weatherData = await getWeatherData(input.city, config.apiKey);\n   *\n   *   // Return structured result\n   *   return {\n   *     status: 'success',\n   *     data: weatherData,\n   *     timing: {\n   *       executionTimeMs: Date.now() - context.performance!.startTime,\n   *       startedAt: new Date(context.performance!.startTime).toISOString(),\n   *       completedAt: new Date().toISOString()\n   *     }\n   *   };\n   * })\n   * ```\n   */\n  execute(\n    fn: (\n      input: TInput,\n      config: TConfig,\n      context: ToolExecutionContext\n    ) => Promise<ToolExecutionResult>\n  ): ToolBuilder<TInput, TConfig> {\n    this.validateBuilderState();\n\n    if (typeof fn !== 'function') {\n      this._validationErrors.push('Execute function must be a valid function');\n    }\n\n    this._executeFunction = fn;\n    return this;\n  }\n\n  /**\n   * Set configuration setup function called when tool is initialized.\n   *\n   * @param fn - Setup function\n   * @returns This builder instance for chaining\n   *\n   * @example\n   * ```typescript\n   * .onSetup(async (config) => {\n   *   // Validate API connectivity\n   *   await validateApiKey(config.apiKey);\n   *\n   *   // Initialize connections\n   *   await initializeCache();\n   *\n   *   console.log('Tool setup completed successfully');\n   * })\n   * ```\n   */\n  onSetup(\n    fn: (config: TConfig) => Promise<void>\n  ): ToolBuilder<TInput, TConfig> {\n    this.validateBuilderState();\n\n    if (typeof fn !== 'function') {\n      this._validationErrors.push('Setup function must be a valid function');\n    }\n\n    this._setupFunction = fn;\n    return this;\n  }\n\n  /**\n   * Set cleanup function called when tool is stopped.\n   *\n   * @param fn - Cleanup function\n   * @returns This builder instance for chaining\n   *\n   * @example\n   * ```typescript\n   * .onCleanup(async () => {\n   *   // Close database connections\n   *   await db.close();\n   *\n   *   // Clear caches\n   *   cache.clear();\n   *\n   *   // Log cleanup completion\n   *   console.log('Tool cleanup completed');\n   * })\n   * ```\n   */\n  onCleanup(fn: () => Promise<void>): ToolBuilder<TInput, TConfig> {\n    this.validateBuilderState();\n\n    if (typeof fn !== 'function') {\n      this._validationErrors.push('Cleanup function must be a valid function');\n    }\n\n    this._cleanupFunction = fn;\n    return this;\n  }\n\n  /**\n   * Set custom health check function for monitoring.\n   *\n   * @param fn - Health check function\n   * @returns This builder instance for chaining\n   *\n   * @example\n   * ```typescript\n   * .healthCheck(async () => {\n   *   try {\n   *     // Check database connectivity\n   *     await db.ping();\n   *\n   *     // Check external API\n   *     const apiStatus = await checkExternalApi();\n   *\n   *     return {\n   *       status: 'healthy',\n   *       details: {\n   *         database: 'connected',\n   *         externalApi: apiStatus\n   *       }\n   *     };\n   *   } catch (error) {\n   *     return {\n   *       status: 'unhealthy',\n   *       details: { error: error.message }\n   *     };\n   *   }\n   * })\n   * ```\n   */\n  healthCheck(\n    fn: () => Promise<{\n      status: 'healthy' | 'unhealthy' | 'degraded';\n      details?: Record<string, any>;\n    }>\n  ): ToolBuilder<TInput, TConfig> {\n    this.validateBuilderState();\n\n    if (typeof fn !== 'function') {\n      this._validationErrors.push(\n        'Health check function must be a valid function'\n      );\n    }\n\n    this._healthCheckFunction = fn;\n    return this;\n  }\n\n  /**\n   * Validates that the builder hasn't been used yet and can accept more configuration.\n   * @private\n   */\n  private validateBuilderState(): void {\n    if (this._built) {\n      throw new ConfigurationError(\n        'ToolBuilder has already been built and cannot be modified. Create a new builder instance.'\n      );\n    }\n  }\n\n  /**\n   * Build the tool with comprehensive validation and error reporting.\n   *\n   * @returns A fully configured Tool instance\n   * @throws {ConfigurationError} When builder configuration is invalid\n   *\n   * @example\n   * ```typescript\n   * const tool = builder.build();\n   * await tool.start({ port: 3000 });\n   * ```\n   */\n  build(): Tool<TInput, TConfig> {\n    // Prevent multiple builds from same instance\n    if (this._built) {\n      throw new ConfigurationError(\n        'ToolBuilder has already been built. Create a new builder instance for a new tool.'\n      );\n    }\n\n    // Validate required components\n    if (!this._metadata) {\n      this._validationErrors.push(\n        'Tool metadata is required. Call .metadata() with tool information.'\n      );\n    }\n\n    if (!this._executeFunction) {\n      this._validationErrors.push(\n        'Execute function is required. Call .execute() with your tool logic.'\n      );\n    }\n\n    // Report all validation errors at once\n    if (this._validationErrors.length > 0) {\n      throw new ConfigurationError(\n        `Tool configuration validation failed:\\n${this._validationErrors.map(e => `  - ${e}`).join('\\n')}`,\n        this._validationErrors\n      );\n    }\n\n    // Create the tool options\n    const options: CreateToolOptions<TInput, TConfig> = {\n      metadata: this._metadata!,\n      schema: {\n        input: this._inputSchema,\n        config: this._configSchema,\n      },\n      execute: this._executeFunction!,\n      setup: this._setupFunction,\n      cleanup: this._cleanupFunction,\n      healthCheck: this._healthCheckFunction,\n    };\n\n    // Mark as built to prevent reuse\n    this._built = true;\n\n    // Create and return the tool\n    return createTool(options);\n  }\n\n  /**\n   * Get current validation errors without building.\n   * Useful for debugging configuration issues.\n   *\n   * @returns Array of validation error messages\n   */\n  getValidationErrors(): string[] {\n    const errors = [...this._validationErrors];\n\n    if (!this._metadata) {\n      errors.push('Tool metadata is required');\n    }\n\n    if (!this._executeFunction) {\n      errors.push('Execute function is required');\n    }\n\n    return errors;\n  }\n\n  /**\n   * Check if the builder configuration is valid without building.\n   *\n   * @returns True if configuration is valid, false otherwise\n   */\n  isValid(): boolean {\n    return this.getValidationErrors().length === 0;\n  }\n}\n\n// ============================================================================\n// FIELD BUILDER FUNCTIONS\n// These functions provide a convenient API for creating field definitions\n// with proper defaults and validation.\n// ============================================================================\n\n/**\n * Creates a string input field with comprehensive validation options.\n *\n * @param options - Field configuration options\n * @returns Configured string field definition\n *\n * @example\n * ```typescript\n * // Simple required string\n * city: stringField({ required: true, description: 'City name' })\n *\n * // String with validation\n * email: stringField({\n *   required: true,\n *   format: 'email',\n *   description: 'User email address',\n *   example: 'user@example.com'\n * })\n *\n * // String with length constraints\n * name: stringField({\n *   required: true,\n *   minLength: 2,\n *   maxLength: 50,\n *   description: 'User name'\n * })\n * ```\n */\nexport function stringField(\n  options: Partial<ToolInputField> = {}\n): ToolInputField {\n  return {\n    type: 'string',\n    required: options.required ?? false,\n    ...options,\n  };\n}\n\n/**\n * Creates a number input field with validation options.\n *\n * @param options - Field configuration options\n * @returns Configured number field definition\n *\n * @example\n * ```typescript\n * temperature: numberField({\n *   required: true,\n *   min: -100,\n *   max: 100,\n *   description: 'Temperature in celsius'\n * })\n * ```\n */\nexport function numberField(\n  options: Partial<ToolInputField> = {}\n): ToolInputField {\n  return {\n    type: 'number',\n    required: options.required ?? false,\n    ...options,\n  };\n}\n\n/**\n * Creates a boolean input field.\n *\n * @param options - Field configuration options\n * @returns Configured boolean field definition\n *\n * @example\n * ```typescript\n * includeDetails: booleanField({\n *   required: false,\n *   default: false,\n *   description: 'Include detailed information'\n * })\n * ```\n */\nexport function booleanField(\n  options: Partial<ToolInputField> = {}\n): ToolInputField {\n  return {\n    type: 'boolean',\n    required: options.required ?? false,\n    ...options,\n  };\n}\n\n/**\n * Creates an array input field with item type validation.\n *\n * @param items - Definition for array items\n * @param options - Field configuration options\n * @returns Configured array field definition\n *\n * @example\n * ```typescript\n * tags: arrayField(\n *   stringField({ minLength: 1, maxLength: 20 }),\n *   {\n *     required: false,\n *     minItems: 0,\n *     maxItems: 10,\n *     uniqueItems: true,\n *     description: 'List of tags'\n *   }\n * )\n * ```\n */\nexport function arrayField(\n  items: ToolInputField,\n  options: Partial<ToolInputField> = {}\n): ToolInputField {\n  return {\n    type: 'array',\n    required: options.required ?? false,\n    items,\n    ...options,\n  };\n}\n\n/**\n * Creates an object input field with property definitions.\n *\n * @param properties - Object property definitions\n * @param options - Field configuration options\n * @returns Configured object field definition\n *\n * @example\n * ```typescript\n * location: objectField(\n *   {\n *     latitude: numberField({ required: true, min: -90, max: 90 }),\n *     longitude: numberField({ required: true, min: -180, max: 180 })\n *   },\n *   {\n *     required: true,\n *     description: 'Geographic coordinates'\n *   }\n * )\n * ```\n */\nexport function objectField(\n  properties: Record<string, ToolInputField>,\n  options: Partial<ToolInputField> = {}\n): ToolInputField {\n  return {\n    type: 'object',\n    required: options.required ?? false,\n    properties,\n    ...options,\n  };\n}\n\n/**\n * Creates a date input field with format validation.\n *\n * @param options - Field configuration options\n * @returns Configured date field definition\n *\n * @example\n * ```typescript\n * birthDate: dateField({\n *   required: true,\n *   description: 'Date of birth',\n *   minDate: '1900-01-01',\n *   maxDate: '2023-12-31'\n * })\n * ```\n */\nexport function dateField(\n  options: Partial<ToolInputField> = {}\n): ToolInputField {\n  return {\n    type: 'date',\n    required: options.required ?? false,\n    ...options,\n  };\n}\n\n/**\n * Creates a time input field with format validation.\n *\n * @param options - Field configuration options\n * @returns Configured time field definition\n *\n * @example\n * ```typescript\n * meetingTime: timeField({\n *   required: true,\n *   description: 'Meeting time',\n *   example: '14:30'\n * })\n * ```\n */\nexport function timeField(\n  options: Partial<ToolInputField> = {}\n): ToolInputField {\n  return {\n    type: 'time',\n    required: options.required ?? false,\n    ...options,\n  };\n}\n\n/**\n * Creates an enum input field with predefined values.\n *\n * @param values - Array of allowed values\n * @param options - Field configuration options\n * @returns Configured enum field definition\n *\n * @example\n * ```typescript\n * priority: enumField(\n *   ['low', 'medium', 'high', 'critical'],\n *   {\n *     required: false,\n *     default: 'medium',\n *     description: 'Task priority level'\n *   }\n * )\n * ```\n */\nexport function enumField(\n  values: any[],\n  options: Partial<ToolInputField> = {}\n): ToolInputField {\n  return {\n    type: 'enum',\n    required: options.required ?? false,\n    enum: values,\n    ...options,\n  };\n}\n\n/**\n * Creates an API key configuration field with security best practices.\n *\n * @param options - Field configuration options\n * @returns Configured API key field definition\n *\n * @example\n * ```typescript\n * // Basic API key\n * apiKey: apiKeyField({ required: true, envVar: 'MY_API_KEY' })\n *\n * // API key with validation pattern\n * githubToken: apiKeyField({\n *   required: true,\n *   envVar: 'GITHUB_TOKEN',\n *   description: 'GitHub personal access token',\n *   validation: {\n *     pattern: '^ghp_[a-zA-Z0-9]{36}$',\n *     errorMessage: 'GitHub token must start with \"ghp_\" and be 40 characters total'\n *   }\n * })\n * ```\n */\nexport function apiKeyField(\n  options: Partial<ToolConfigField> = {}\n): ToolConfigField {\n  return {\n    type: 'apiKey',\n    required: options.required ?? true,\n    secret: true,\n    description: options.description || 'API key for authentication',\n    ...options,\n  };\n}\n\n/**\n * Creates a configuration string field.\n *\n * @param options - Field configuration options\n * @returns Configured string config field definition\n *\n * @example\n * ```typescript\n * baseUrl: configStringField({\n *   required: false,\n *   default: 'https://api.example.com',\n *   description: 'Base URL for API requests',\n *   validation: { pattern: '^https://.+' }\n * })\n * ```\n */\nexport function configStringField(\n  options: Partial<ToolConfigField> = {}\n): ToolConfigField {\n  return {\n    type: 'string',\n    required: options.required ?? false,\n    ...options,\n  };\n}\n\n/**\n * Creates a configuration number field.\n *\n * @param options - Field configuration options\n * @returns Configured number config field definition\n *\n * @example\n * ```typescript\n * timeout: configNumberField({\n *   required: false,\n *   default: 5000,\n *   description: 'Request timeout in milliseconds',\n *   validation: { min: 1000, max: 30000 }\n * })\n * ```\n */\nexport function configNumberField(\n  options: Partial<ToolConfigField> = {}\n): ToolConfigField {\n  return {\n    type: 'number',\n    required: options.required ?? false,\n    ...options,\n  };\n}\n\n/**\n * Creates a URL configuration field with validation.\n *\n * @param options - Field configuration options\n * @returns Configured URL config field definition\n *\n * @example\n * ```typescript\n * webhookUrl: configUrlField({\n *   required: true,\n *   description: 'Webhook endpoint URL',\n *   validation: { allowedProtocols: ['https'] }\n * })\n * ```\n */\nexport function configUrlField(\n  options: Partial<ToolConfigField> = {}\n): ToolConfigField {\n  return {\n    type: 'url',\n    required: options.required ?? false,\n    validation: {\n      allowedProtocols: ['https', 'http'],\n      ...options.validation,\n    },\n    ...options,\n  };\n}\n\n/**\n * Comprehensive validation of tool definition for completeness, correctness, and best practices.\n * This function ensures that all required fields are present and properly formatted.\n *\n * @param options - Tool configuration options to validate\n * @throws {ConfigurationError} When validation fails\n * @private\n */\nfunction validateToolDefinition<\n  TInput extends ToolInput,\n  TConfig extends ToolConfig,\n>(options: CreateToolOptions<TInput, TConfig>): void {\n  const errors: string[] = [];\n  const warnings: string[] = [];\n\n  // Comprehensive metadata validation\n  if (!options.metadata) {\n    errors.push('Tool metadata is required');\n  } else {\n    const meta = options.metadata;\n\n    // Required fields validation\n    if (\n      !meta.name ||\n      typeof meta.name !== 'string' ||\n      meta.name.trim().length === 0\n    ) {\n      errors.push('Tool name is required and must be a non-empty string');\n    } else if (!/^[a-z0-9-]+$/.test(meta.name)) {\n      warnings.push(\n        'Tool name should use kebab-case format (lowercase with hyphens)'\n      );\n    }\n\n    if (\n      !meta.version ||\n      typeof meta.version !== 'string' ||\n      meta.version.trim().length === 0\n    ) {\n      errors.push('Tool version is required and must be a non-empty string');\n    } else if (!/^\\d+\\.\\d+\\.\\d+/.test(meta.version)) {\n      warnings.push(\n        'Tool version should follow semantic versioning (e.g., \"1.0.0\")'\n      );\n    }\n\n    if (\n      !meta.description ||\n      typeof meta.description !== 'string' ||\n      meta.description.trim().length === 0\n    ) {\n      errors.push(\n        'Tool description is required and must be a non-empty string'\n      );\n    } else if (meta.description.length < 10) {\n      warnings.push(\n        'Tool description should be descriptive (at least 10 characters)'\n      );\n    }\n\n    if (!Array.isArray(meta.capabilities) || meta.capabilities.length === 0) {\n      errors.push('Tool capabilities must be a non-empty array');\n    } else {\n      // Validate capability strings\n      meta.capabilities.forEach((cap, index) => {\n        if (typeof cap !== 'string' || cap.trim().length === 0) {\n          errors.push(\n            `Capability at index ${index} must be a non-empty string`\n          );\n        }\n      });\n    }\n\n    // Optional fields validation\n    if (meta.author && typeof meta.author !== 'string') {\n      errors.push('Tool author must be a string if provided');\n    }\n\n    if (meta.license && typeof meta.license !== 'string') {\n      errors.push('Tool license must be a string if provided');\n    }\n\n    if (meta.tags && !Array.isArray(meta.tags)) {\n      errors.push('Tool tags must be an array if provided');\n    }\n  }\n\n  // Schema structure validation\n  if (!options.schema) {\n    errors.push('Tool schema is required');\n  } else {\n    const schema = options.schema;\n\n    if (!schema.input || typeof schema.input !== 'object') {\n      errors.push('Input schema is required and must be an object');\n    }\n\n    if (!schema.config || typeof schema.config !== 'object') {\n      errors.push('Config schema is required and must be an object');\n    }\n  }\n\n  // Execute function validation\n  if (!options.execute || typeof options.execute !== 'function') {\n    errors.push('Execute function is required and must be a function');\n  } else {\n    // Check function signature (approximate)\n    const funcStr = options.execute.toString();\n    if (funcStr.includes('function') && options.execute.length < 3) {\n      warnings.push(\n        'Execute function should accept three parameters: (input, config, context)'\n      );\n    }\n  }\n\n  // Optional function validations\n  if (options.setup && typeof options.setup !== 'function') {\n    errors.push('Setup function must be a function if provided');\n  }\n\n  if (options.cleanup && typeof options.cleanup !== 'function') {\n    errors.push('Cleanup function must be a function if provided');\n  }\n\n  if (options.healthCheck && typeof options.healthCheck !== 'function') {\n    errors.push('Health check function must be a function if provided');\n  }\n\n  // Report errors\n  if (errors.length > 0) {\n    throw new ConfigurationError(\n      `Tool definition validation failed:\\n${errors.map(e => `  ❌ ${e}`).join('\\n')}${\n        warnings.length > 0\n          ? `\\n\\nWarnings:\\n${warnings.map(w => `  ⚠️  ${w}`).join('\\n')}`\n          : ''\n      }`,\n      errors\n    );\n  }\n\n  // Log warnings in development\n  if (\n    warnings.length > 0 &&\n    (process.env.NODE_ENV === 'development' ||\n      process.env.AI_SPINE_DEBUG === 'true')\n  ) {\n    console.warn(\n      `\\n⚠️  Tool Definition Warnings for \"${options.metadata.name}\":\\n${warnings.map(w => `  • ${w}`).join('\\n')}\\n`\n    );\n  }\n}\n\n/**\n * Applies intelligent defaults and enhancements to tool options.\n * This function improves developer experience by setting reasonable defaults.\n *\n * @param options - Original tool options\n * @returns Enhanced options with intelligent defaults\n * @private\n */\nfunction applyIntelligentDefaults<\n  TInput extends ToolInput,\n  TConfig extends ToolConfig,\n>(\n  options: CreateToolOptions<TInput, TConfig>\n): CreateToolOptions<TInput, TConfig> {\n  const enhanced = { ...options };\n\n  // Enhance metadata with defaults\n  if (!enhanced.metadata.tags) {\n    enhanced.metadata.tags = [];\n  }\n\n  // Add SDK version if not specified\n  if (!enhanced.metadata.minSdkVersion) {\n    enhanced.metadata.minSdkVersion = '1.0.0';\n  }\n\n  // Ensure schema has proper structure\n  if (!enhanced.schema.input) {\n    enhanced.schema.input = {};\n  }\n\n  if (!enhanced.schema.config) {\n    enhanced.schema.config = {};\n  }\n\n  return enhanced;\n}\n\n/**\n * Validates schema structure and field definitions for correctness.\n *\n * @param schema - Tool schema to validate\n * @throws {ValidationError} When schema validation fails\n * @private\n */\nfunction validateSchemaStructure(schema: ToolSchema): void {\n  const errors: string[] = [];\n\n  // Validate input fields\n  if (schema.input) {\n    Object.entries(schema.input).forEach(([fieldName, field]) => {\n      if (!field.type) {\n        errors.push(`Input field '${fieldName}' must have a type`);\n      }\n\n      if (field.required === undefined) {\n        errors.push(`Input field '${fieldName}' must specify if it's required`);\n      }\n    });\n  }\n\n  // Validate config fields\n  if (schema.config) {\n    Object.entries(schema.config).forEach(([fieldName, field]) => {\n      if (!field.type) {\n        errors.push(`Config field '${fieldName}' must have a type`);\n      }\n\n      if (field.required === undefined) {\n        errors.push(\n          `Config field '${fieldName}' must specify if it's required`\n        );\n      }\n    });\n  }\n\n  if (errors.length > 0) {\n    throw new ValidationError(\n      `Schema validation failed:\\n${errors.map(e => `  ❌ ${e}`).join('\\n')}`\n    );\n  }\n}\n\n/**\n * Adds development mode enhancements to improve developer experience.\n *\n * @param tool - Tool instance to enhance\n * @param definition - Tool definition for context\n * @private\n */\nfunction addDevelopmentEnhancements<\n  TInput extends ToolInput,\n  TConfig extends ToolConfig,\n>(\n  tool: Tool<TInput, TConfig>,\n  definition: ToolDefinition<TInput, TConfig>\n): void {\n  // Add helpful logging\n  console.log(\n    `\\n🛠️  Created tool \"${definition.metadata.name}\" v${definition.metadata.version}`\n  );\n  console.log(`   📝 ${definition.metadata.description}`);\n  console.log(\n    `   🎯 Capabilities: ${definition.metadata.capabilities.join(', ')}`\n  );\n  console.log(\n    `   📊 Input fields: ${Object.keys(definition.schema.input).length}`\n  );\n  console.log(\n    `   ⚙️  Config fields: ${Object.keys(definition.schema.config).length}`\n  );\n\n  // Add development event listeners\n  tool.on('beforeExecution', context => {\n    console.log(\n      `🚀 Executing tool \"${definition.metadata.name}\" (ID: ${context.executionId})`\n    );\n  });\n\n  tool.on('afterExecution', (_context, result) => {\n    const duration = result.timing?.executionTimeMs || 0;\n    const status = result.status === 'success' ? '✅' : '❌';\n    console.log(`${status} Tool execution ${result.status} in ${duration}ms`);\n  });\n\n  tool.on('error', error => {\n    console.error(\n      `❌ Tool error in \"${definition.metadata.name}\":`,\n      error.message\n    );\n  });\n}\n\n// ============================================================================\n// CONVENIENCE FUNCTIONS\n// These functions provide shortcuts for common tool creation patterns.\n// ============================================================================\n\n/**\n * Creates a simple tool with minimal configuration for quick prototyping.\n *\n * @param name - Tool name\n * @param version - Tool version\n * @param description - Tool description\n * @param execute - Tool execution function\n * @returns Configured tool instance\n *\n * @example\n * ```typescript\n * const echoTool = simpleCreateTool(\n *   'echo-tool',\n *   '1.0.0',\n *   'Simple echo tool for testing',\n *   async (input) => {\n *     return {\n *       status: 'success',\n *       data: { echo: input }\n *     };\n *   }\n * );\n *\n * await echoTool.start({ port: 3000 });\n * ```\n */\nexport function simpleCreateTool<TInput extends ToolInput = ToolInput>(\n  name: string,\n  version: string,\n  description: string,\n  execute: (input: TInput) => Promise<any>\n): Tool<TInput, Record<string, never>> {\n  return createTool({\n    metadata: {\n      name,\n      version,\n      description,\n      capabilities: [name.replace(/-tool$/, '')],\n    },\n    schema: {\n      input: {},\n      config: {},\n    },\n    execute: async (input, _config, context) => {\n      try {\n        const result = await execute(input);\n        return {\n          status: 'success',\n          data: result,\n          timing: {\n            executionTimeMs: Date.now() - context.performance!.startTime,\n            startedAt: new Date(context.performance!.startTime).toISOString(),\n            completedAt: new Date().toISOString(),\n          },\n        };\n      } catch (error) {\n        return {\n          status: 'error',\n          error: {\n            code: 'EXECUTION_ERROR',\n            message: (error as Error).message,\n            type: 'execution_error',\n          },\n        };\n      }\n    },\n  });\n}\n\n/**\n * Creates a tool builder instance for fluent API usage.\n *\n * @returns New ToolBuilder instance\n *\n * @example\n * ```typescript\n * const tool = createToolBuilder()\n *   .metadata({ name: 'my-tool', version: '1.0.0', ... })\n *   .inputField('message', stringField({ required: true }))\n *   .execute(async (input, config, context) => ({ ... }))\n *   .build();\n * ```\n */\nexport function createToolBuilder<\n  TInput extends ToolInput = ToolInput,\n  TConfig extends ToolConfig = ToolConfig,\n>(): ToolBuilder<TInput, TConfig> {\n  return new ToolBuilder<TInput, TConfig>();\n}\n"],"names":["Tool","ConfigurationError","ValidationError"],"mappings":"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"}